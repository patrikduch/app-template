// Code generated by SQLBoiler 4.13.0 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package models

import (
	"context"
	"database/sql"
	"fmt"
	"reflect"
	"strconv"
	"strings"
	"sync"
	"time"

	"github.com/friendsofgo/errors"
	"github.com/volatiletech/null/v8"
	"github.com/volatiletech/sqlboiler/v4/boil"
	"github.com/volatiletech/sqlboiler/v4/queries"
	"github.com/volatiletech/sqlboiler/v4/queries/qm"
	"github.com/volatiletech/sqlboiler/v4/queries/qmhelper"
	"github.com/volatiletech/strmangle"
)

// AssetType is an object representing the database table.
type AssetType struct {
	AssetType         string      `boil:"asset_type" json:"asset_type" toml:"asset_type" yaml:"asset_type"`
	Custom            bool        `boil:"custom" json:"custom" toml:"custom" yaml:"custom"`
	PayloadFCT        null.String `boil:"payload_fct" json:"payload_fct,omitempty" toml:"payload_fct" yaml:"payload_fct,omitempty"`
	Vendor            null.String `boil:"vendor" json:"vendor,omitempty" toml:"vendor" yaml:"vendor,omitempty"`
	Model             null.String `boil:"model" json:"model,omitempty" toml:"model" yaml:"model,omitempty"`
	Translation       null.JSON   `boil:"translation" json:"translation,omitempty" toml:"translation" yaml:"translation,omitempty"`
	Urldoc            null.String `boil:"urldoc" json:"urldoc,omitempty" toml:"urldoc" yaml:"urldoc,omitempty"`
	AllowedInactivity null.String `boil:"allowed_inactivity" json:"allowed_inactivity,omitempty" toml:"allowed_inactivity" yaml:"allowed_inactivity,omitempty"`
	IvAssetType       null.Int    `boil:"iv_asset_type" json:"iv_asset_type,omitempty" toml:"iv_asset_type" yaml:"iv_asset_type,omitempty"`
	Icon              null.String `boil:"icon" json:"icon,omitempty" toml:"icon" yaml:"icon,omitempty"`

	R *assetTypeR `boil:"-" json:"-" toml:"-" yaml:"-"`
	L assetTypeL  `boil:"-" json:"-" toml:"-" yaml:"-"`
}

var AssetTypeColumns = struct {
	AssetType         string
	Custom            string
	PayloadFCT        string
	Vendor            string
	Model             string
	Translation       string
	Urldoc            string
	AllowedInactivity string
	IvAssetType       string
	Icon              string
}{
	AssetType:         "asset_type",
	Custom:            "custom",
	PayloadFCT:        "payload_fct",
	Vendor:            "vendor",
	Model:             "model",
	Translation:       "translation",
	Urldoc:            "urldoc",
	AllowedInactivity: "allowed_inactivity",
	IvAssetType:       "iv_asset_type",
	Icon:              "icon",
}

var AssetTypeTableColumns = struct {
	AssetType         string
	Custom            string
	PayloadFCT        string
	Vendor            string
	Model             string
	Translation       string
	Urldoc            string
	AllowedInactivity string
	IvAssetType       string
	Icon              string
}{
	AssetType:         "asset_type.asset_type",
	Custom:            "asset_type.custom",
	PayloadFCT:        "asset_type.payload_fct",
	Vendor:            "asset_type.vendor",
	Model:             "asset_type.model",
	Translation:       "asset_type.translation",
	Urldoc:            "asset_type.urldoc",
	AllowedInactivity: "asset_type.allowed_inactivity",
	IvAssetType:       "asset_type.iv_asset_type",
	Icon:              "asset_type.icon",
}

// Generated where

var AssetTypeWhere = struct {
	AssetType         whereHelperstring
	Custom            whereHelperbool
	PayloadFCT        whereHelpernull_String
	Vendor            whereHelpernull_String
	Model             whereHelpernull_String
	Translation       whereHelpernull_JSON
	Urldoc            whereHelpernull_String
	AllowedInactivity whereHelpernull_String
	IvAssetType       whereHelpernull_Int
	Icon              whereHelpernull_String
}{
	AssetType:         whereHelperstring{field: "\"asset_type\".\"asset_type\""},
	Custom:            whereHelperbool{field: "\"asset_type\".\"custom\""},
	PayloadFCT:        whereHelpernull_String{field: "\"asset_type\".\"payload_fct\""},
	Vendor:            whereHelpernull_String{field: "\"asset_type\".\"vendor\""},
	Model:             whereHelpernull_String{field: "\"asset_type\".\"model\""},
	Translation:       whereHelpernull_JSON{field: "\"asset_type\".\"translation\""},
	Urldoc:            whereHelpernull_String{field: "\"asset_type\".\"urldoc\""},
	AllowedInactivity: whereHelpernull_String{field: "\"asset_type\".\"allowed_inactivity\""},
	IvAssetType:       whereHelpernull_Int{field: "\"asset_type\".\"iv_asset_type\""},
	Icon:              whereHelpernull_String{field: "\"asset_type\".\"icon\""},
}

// AssetTypeRels is where relationship names are stored.
var AssetTypeRels = struct {
}{}

// assetTypeR is where relationships are stored.
type assetTypeR struct {
}

// NewStruct creates a new relationship struct
func (*assetTypeR) NewStruct() *assetTypeR {
	return &assetTypeR{}
}

// assetTypeL is where Load methods for each relationship are stored.
type assetTypeL struct{}

var (
	assetTypeAllColumns            = []string{"asset_type", "custom", "payload_fct", "vendor", "model", "translation", "urldoc", "allowed_inactivity", "iv_asset_type", "icon"}
	assetTypeColumnsWithoutDefault = []string{"asset_type"}
	assetTypeColumnsWithDefault    = []string{"custom", "payload_fct", "vendor", "model", "translation", "urldoc", "allowed_inactivity", "iv_asset_type", "icon"}
	assetTypePrimaryKeyColumns     = []string{"asset_type"}
	assetTypeGeneratedColumns      = []string{}
)

type (
	// AssetTypeSlice is an alias for a slice of pointers to AssetType.
	// This should almost always be used instead of []AssetType.
	AssetTypeSlice []*AssetType
	// AssetTypeHook is the signature for custom AssetType hook methods
	AssetTypeHook func(context.Context, boil.ContextExecutor, *AssetType) error

	assetTypeQuery struct {
		*queries.Query
	}
)

// Cache for insert, update and upsert
var (
	assetTypeType                 = reflect.TypeOf(&AssetType{})
	assetTypeMapping              = queries.MakeStructMapping(assetTypeType)
	assetTypePrimaryKeyMapping, _ = queries.BindMapping(assetTypeType, assetTypeMapping, assetTypePrimaryKeyColumns)
	assetTypeInsertCacheMut       sync.RWMutex
	assetTypeInsertCache          = make(map[string]insertCache)
	assetTypeUpdateCacheMut       sync.RWMutex
	assetTypeUpdateCache          = make(map[string]updateCache)
	assetTypeUpsertCacheMut       sync.RWMutex
	assetTypeUpsertCache          = make(map[string]insertCache)
)

var (
	// Force time package dependency for automated UpdatedAt/CreatedAt.
	_ = time.Second
	// Force qmhelper dependency for where clause generation (which doesn't
	// always happen)
	_ = qmhelper.Where
)

var assetTypeAfterSelectHooks []AssetTypeHook

var assetTypeBeforeInsertHooks []AssetTypeHook
var assetTypeAfterInsertHooks []AssetTypeHook

var assetTypeBeforeUpdateHooks []AssetTypeHook
var assetTypeAfterUpdateHooks []AssetTypeHook

var assetTypeBeforeDeleteHooks []AssetTypeHook
var assetTypeAfterDeleteHooks []AssetTypeHook

var assetTypeBeforeUpsertHooks []AssetTypeHook
var assetTypeAfterUpsertHooks []AssetTypeHook

// doAfterSelectHooks executes all "after Select" hooks.
func (o *AssetType) doAfterSelectHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range assetTypeAfterSelectHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeInsertHooks executes all "before insert" hooks.
func (o *AssetType) doBeforeInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range assetTypeBeforeInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterInsertHooks executes all "after Insert" hooks.
func (o *AssetType) doAfterInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range assetTypeAfterInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpdateHooks executes all "before Update" hooks.
func (o *AssetType) doBeforeUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range assetTypeBeforeUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpdateHooks executes all "after Update" hooks.
func (o *AssetType) doAfterUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range assetTypeAfterUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeDeleteHooks executes all "before Delete" hooks.
func (o *AssetType) doBeforeDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range assetTypeBeforeDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterDeleteHooks executes all "after Delete" hooks.
func (o *AssetType) doAfterDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range assetTypeAfterDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpsertHooks executes all "before Upsert" hooks.
func (o *AssetType) doBeforeUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range assetTypeBeforeUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpsertHooks executes all "after Upsert" hooks.
func (o *AssetType) doAfterUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range assetTypeAfterUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// AddAssetTypeHook registers your hook function for all future operations.
func AddAssetTypeHook(hookPoint boil.HookPoint, assetTypeHook AssetTypeHook) {
	switch hookPoint {
	case boil.AfterSelectHook:
		assetTypeAfterSelectHooks = append(assetTypeAfterSelectHooks, assetTypeHook)
	case boil.BeforeInsertHook:
		assetTypeBeforeInsertHooks = append(assetTypeBeforeInsertHooks, assetTypeHook)
	case boil.AfterInsertHook:
		assetTypeAfterInsertHooks = append(assetTypeAfterInsertHooks, assetTypeHook)
	case boil.BeforeUpdateHook:
		assetTypeBeforeUpdateHooks = append(assetTypeBeforeUpdateHooks, assetTypeHook)
	case boil.AfterUpdateHook:
		assetTypeAfterUpdateHooks = append(assetTypeAfterUpdateHooks, assetTypeHook)
	case boil.BeforeDeleteHook:
		assetTypeBeforeDeleteHooks = append(assetTypeBeforeDeleteHooks, assetTypeHook)
	case boil.AfterDeleteHook:
		assetTypeAfterDeleteHooks = append(assetTypeAfterDeleteHooks, assetTypeHook)
	case boil.BeforeUpsertHook:
		assetTypeBeforeUpsertHooks = append(assetTypeBeforeUpsertHooks, assetTypeHook)
	case boil.AfterUpsertHook:
		assetTypeAfterUpsertHooks = append(assetTypeAfterUpsertHooks, assetTypeHook)
	}
}

// One returns a single assetType record from the query.
func (q assetTypeQuery) One(ctx context.Context, exec boil.ContextExecutor) (*AssetType, error) {
	o := &AssetType{}

	queries.SetLimit(q.Query, 1)

	err := q.Bind(ctx, exec, o)
	if err != nil {
		if errors.Is(err, sql.ErrNoRows) {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: failed to execute a one query for asset_type")
	}

	if err := o.doAfterSelectHooks(ctx, exec); err != nil {
		return o, err
	}

	return o, nil
}

// All returns all AssetType records from the query.
func (q assetTypeQuery) All(ctx context.Context, exec boil.ContextExecutor) (AssetTypeSlice, error) {
	var o []*AssetType

	err := q.Bind(ctx, exec, &o)
	if err != nil {
		return nil, errors.Wrap(err, "models: failed to assign all query results to AssetType slice")
	}

	if len(assetTypeAfterSelectHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterSelectHooks(ctx, exec); err != nil {
				return o, err
			}
		}
	}

	return o, nil
}

// Count returns the count of all AssetType records in the query.
func (q assetTypeQuery) Count(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to count asset_type rows")
	}

	return count, nil
}

// Exists checks if the row exists in the table.
func (q assetTypeQuery) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)
	queries.SetLimit(q.Query, 1)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return false, errors.Wrap(err, "models: failed to check if asset_type exists")
	}

	return count > 0, nil
}

// AssetTypes retrieves all the records using an executor.
func AssetTypes(mods ...qm.QueryMod) assetTypeQuery {
	mods = append(mods, qm.From("\"asset_type\""))
	q := NewQuery(mods...)
	if len(queries.GetSelect(q)) == 0 {
		queries.SetSelect(q, []string{"\"asset_type\".*"})
	}

	return assetTypeQuery{q}
}

// FindAssetType retrieves a single record by ID with an executor.
// If selectCols is empty Find will return all columns.
func FindAssetType(ctx context.Context, exec boil.ContextExecutor, assetType string, selectCols ...string) (*AssetType, error) {
	assetTypeObj := &AssetType{}

	sel := "*"
	if len(selectCols) > 0 {
		sel = strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, selectCols), ",")
	}
	query := fmt.Sprintf(
		"select %s from \"asset_type\" where \"asset_type\"=$1", sel,
	)

	q := queries.Raw(query, assetType)

	err := q.Bind(ctx, exec, assetTypeObj)
	if err != nil {
		if errors.Is(err, sql.ErrNoRows) {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: unable to select from asset_type")
	}

	if err = assetTypeObj.doAfterSelectHooks(ctx, exec); err != nil {
		return assetTypeObj, err
	}

	return assetTypeObj, nil
}

// Insert a single record using an executor.
// See boil.Columns.InsertColumnSet documentation to understand column list inference for inserts.
func (o *AssetType) Insert(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) error {
	if o == nil {
		return errors.New("models: no asset_type provided for insertion")
	}

	var err error

	if err := o.doBeforeInsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(assetTypeColumnsWithDefault, o)

	key := makeCacheKey(columns, nzDefaults)
	assetTypeInsertCacheMut.RLock()
	cache, cached := assetTypeInsertCache[key]
	assetTypeInsertCacheMut.RUnlock()

	if !cached {
		wl, returnColumns := columns.InsertColumnSet(
			assetTypeAllColumns,
			assetTypeColumnsWithDefault,
			assetTypeColumnsWithoutDefault,
			nzDefaults,
		)

		cache.valueMapping, err = queries.BindMapping(assetTypeType, assetTypeMapping, wl)
		if err != nil {
			return err
		}
		cache.retMapping, err = queries.BindMapping(assetTypeType, assetTypeMapping, returnColumns)
		if err != nil {
			return err
		}
		if len(wl) != 0 {
			cache.query = fmt.Sprintf("INSERT INTO \"asset_type\" (\"%s\") %%sVALUES (%s)%%s", strings.Join(wl, "\",\""), strmangle.Placeholders(dialect.UseIndexPlaceholders, len(wl), 1, 1))
		} else {
			cache.query = "INSERT INTO \"asset_type\" %sDEFAULT VALUES%s"
		}

		var queryOutput, queryReturning string

		if len(cache.retMapping) != 0 {
			queryReturning = fmt.Sprintf(" RETURNING \"%s\"", strings.Join(returnColumns, "\",\""))
		}

		cache.query = fmt.Sprintf(cache.query, queryOutput, queryReturning)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}

	if len(cache.retMapping) != 0 {
		err = exec.QueryRowContext(ctx, cache.query, vals...).Scan(queries.PtrsFromMapping(value, cache.retMapping)...)
	} else {
		_, err = exec.ExecContext(ctx, cache.query, vals...)
	}

	if err != nil {
		return errors.Wrap(err, "models: unable to insert into asset_type")
	}

	if !cached {
		assetTypeInsertCacheMut.Lock()
		assetTypeInsertCache[key] = cache
		assetTypeInsertCacheMut.Unlock()
	}

	return o.doAfterInsertHooks(ctx, exec)
}

// Update uses an executor to update the AssetType.
// See boil.Columns.UpdateColumnSet documentation to understand column list inference for updates.
// Update does not automatically update the record in case of default values. Use .Reload() to refresh the records.
func (o *AssetType) Update(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) (int64, error) {
	var err error
	if err = o.doBeforeUpdateHooks(ctx, exec); err != nil {
		return 0, err
	}
	key := makeCacheKey(columns, nil)
	assetTypeUpdateCacheMut.RLock()
	cache, cached := assetTypeUpdateCache[key]
	assetTypeUpdateCacheMut.RUnlock()

	if !cached {
		wl := columns.UpdateColumnSet(
			assetTypeAllColumns,
			assetTypePrimaryKeyColumns,
		)

		if !columns.IsWhitelist() {
			wl = strmangle.SetComplement(wl, []string{"created_at"})
		}
		if len(wl) == 0 {
			return 0, errors.New("models: unable to update asset_type, could not build whitelist")
		}

		cache.query = fmt.Sprintf("UPDATE \"asset_type\" SET %s WHERE %s",
			strmangle.SetParamNames("\"", "\"", 1, wl),
			strmangle.WhereClause("\"", "\"", len(wl)+1, assetTypePrimaryKeyColumns),
		)
		cache.valueMapping, err = queries.BindMapping(assetTypeType, assetTypeMapping, append(wl, assetTypePrimaryKeyColumns...))
		if err != nil {
			return 0, err
		}
	}

	values := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, values)
	}
	var result sql.Result
	result, err = exec.ExecContext(ctx, cache.query, values...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update asset_type row")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by update for asset_type")
	}

	if !cached {
		assetTypeUpdateCacheMut.Lock()
		assetTypeUpdateCache[key] = cache
		assetTypeUpdateCacheMut.Unlock()
	}

	return rowsAff, o.doAfterUpdateHooks(ctx, exec)
}

// UpdateAll updates all rows with the specified column values.
func (q assetTypeQuery) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	queries.SetUpdate(q.Query, cols)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update all for asset_type")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to retrieve rows affected for asset_type")
	}

	return rowsAff, nil
}

// UpdateAll updates all rows with the specified column values, using an executor.
func (o AssetTypeSlice) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	ln := int64(len(o))
	if ln == 0 {
		return 0, nil
	}

	if len(cols) == 0 {
		return 0, errors.New("models: update all requires at least one column argument")
	}

	colNames := make([]string, len(cols))
	args := make([]interface{}, len(cols))

	i := 0
	for name, value := range cols {
		colNames[i] = name
		args[i] = value
		i++
	}

	// Append all of the primary key values for each column
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), assetTypePrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := fmt.Sprintf("UPDATE \"asset_type\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, colNames),
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), len(colNames)+1, assetTypePrimaryKeyColumns, len(o)))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update all in assetType slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to retrieve rows affected all in update all assetType")
	}
	return rowsAff, nil
}

// Upsert attempts an insert using an executor, and does an update or ignore on conflict.
// See boil.Columns documentation for how to properly use updateColumns and insertColumns.
func (o *AssetType) Upsert(ctx context.Context, exec boil.ContextExecutor, updateOnConflict bool, conflictColumns []string, updateColumns, insertColumns boil.Columns) error {
	if o == nil {
		return errors.New("models: no asset_type provided for upsert")
	}

	if err := o.doBeforeUpsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(assetTypeColumnsWithDefault, o)

	// Build cache key in-line uglily - mysql vs psql problems
	buf := strmangle.GetBuffer()
	if updateOnConflict {
		buf.WriteByte('t')
	} else {
		buf.WriteByte('f')
	}
	buf.WriteByte('.')
	for _, c := range conflictColumns {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(updateColumns.Kind))
	for _, c := range updateColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(insertColumns.Kind))
	for _, c := range insertColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzDefaults {
		buf.WriteString(c)
	}
	key := buf.String()
	strmangle.PutBuffer(buf)

	assetTypeUpsertCacheMut.RLock()
	cache, cached := assetTypeUpsertCache[key]
	assetTypeUpsertCacheMut.RUnlock()

	var err error

	if !cached {
		insert, ret := insertColumns.InsertColumnSet(
			assetTypeAllColumns,
			assetTypeColumnsWithDefault,
			assetTypeColumnsWithoutDefault,
			nzDefaults,
		)

		update := updateColumns.UpdateColumnSet(
			assetTypeAllColumns,
			assetTypePrimaryKeyColumns,
		)

		if updateOnConflict && len(update) == 0 {
			return errors.New("models: unable to upsert asset_type, could not build update column list")
		}

		conflict := conflictColumns
		if len(conflict) == 0 {
			conflict = make([]string, len(assetTypePrimaryKeyColumns))
			copy(conflict, assetTypePrimaryKeyColumns)
		}
		cache.query = buildUpsertQueryPostgres(dialect, "\"asset_type\"", updateOnConflict, ret, update, conflict, insert)

		cache.valueMapping, err = queries.BindMapping(assetTypeType, assetTypeMapping, insert)
		if err != nil {
			return err
		}
		if len(ret) != 0 {
			cache.retMapping, err = queries.BindMapping(assetTypeType, assetTypeMapping, ret)
			if err != nil {
				return err
			}
		}
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)
	var returns []interface{}
	if len(cache.retMapping) != 0 {
		returns = queries.PtrsFromMapping(value, cache.retMapping)
	}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}
	if len(cache.retMapping) != 0 {
		err = exec.QueryRowContext(ctx, cache.query, vals...).Scan(returns...)
		if errors.Is(err, sql.ErrNoRows) {
			err = nil // Postgres doesn't return anything when there's no update
		}
	} else {
		_, err = exec.ExecContext(ctx, cache.query, vals...)
	}
	if err != nil {
		return errors.Wrap(err, "models: unable to upsert asset_type")
	}

	if !cached {
		assetTypeUpsertCacheMut.Lock()
		assetTypeUpsertCache[key] = cache
		assetTypeUpsertCacheMut.Unlock()
	}

	return o.doAfterUpsertHooks(ctx, exec)
}

// Delete deletes a single AssetType record with an executor.
// Delete will match against the primary key column to find the record to delete.
func (o *AssetType) Delete(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if o == nil {
		return 0, errors.New("models: no AssetType provided for delete")
	}

	if err := o.doBeforeDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	args := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), assetTypePrimaryKeyMapping)
	sql := "DELETE FROM \"asset_type\" WHERE \"asset_type\"=$1"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete from asset_type")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by delete for asset_type")
	}

	if err := o.doAfterDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	return rowsAff, nil
}

// DeleteAll deletes all matching rows.
func (q assetTypeQuery) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if q.Query == nil {
		return 0, errors.New("models: no assetTypeQuery provided for delete all")
	}

	queries.SetDelete(q.Query)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete all from asset_type")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by deleteall for asset_type")
	}

	return rowsAff, nil
}

// DeleteAll deletes all rows in the slice, using an executor.
func (o AssetTypeSlice) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if len(o) == 0 {
		return 0, nil
	}

	if len(assetTypeBeforeDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doBeforeDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	var args []interface{}
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), assetTypePrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "DELETE FROM \"asset_type\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, assetTypePrimaryKeyColumns, len(o))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete all from assetType slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by deleteall for asset_type")
	}

	if len(assetTypeAfterDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	return rowsAff, nil
}

// Reload refetches the object from the database
// using the primary keys with an executor.
func (o *AssetType) Reload(ctx context.Context, exec boil.ContextExecutor) error {
	ret, err := FindAssetType(ctx, exec, o.AssetType)
	if err != nil {
		return err
	}

	*o = *ret
	return nil
}

// ReloadAll refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *AssetTypeSlice) ReloadAll(ctx context.Context, exec boil.ContextExecutor) error {
	if o == nil || len(*o) == 0 {
		return nil
	}

	slice := AssetTypeSlice{}
	var args []interface{}
	for _, obj := range *o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), assetTypePrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "SELECT \"asset_type\".* FROM \"asset_type\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, assetTypePrimaryKeyColumns, len(*o))

	q := queries.Raw(sql, args...)

	err := q.Bind(ctx, exec, &slice)
	if err != nil {
		return errors.Wrap(err, "models: unable to reload all in AssetTypeSlice")
	}

	*o = slice

	return nil
}

// AssetTypeExists checks if the AssetType row exists.
func AssetTypeExists(ctx context.Context, exec boil.ContextExecutor, assetType string) (bool, error) {
	var exists bool
	sql := "select exists(select 1 from \"asset_type\" where \"asset_type\"=$1 limit 1)"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, assetType)
	}
	row := exec.QueryRowContext(ctx, sql, assetType)

	err := row.Scan(&exists)
	if err != nil {
		return false, errors.Wrap(err, "models: unable to check if asset_type exists")
	}

	return exists, nil
}
