// Code generated by SQLBoiler 4.13.0 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package models

import (
	"context"
	"database/sql"
	"fmt"
	"reflect"
	"strconv"
	"strings"
	"sync"
	"time"

	"github.com/friendsofgo/errors"
	"github.com/volatiletech/null/v8"
	"github.com/volatiletech/sqlboiler/v4/boil"
	"github.com/volatiletech/sqlboiler/v4/queries"
	"github.com/volatiletech/sqlboiler/v4/queries/qm"
	"github.com/volatiletech/sqlboiler/v4/queries/qmhelper"
	"github.com/volatiletech/strmangle"
)

// MbusAccess is an object representing the database table.
type MbusAccess struct {
	ID        int          `boil:"id" json:"id" toml:"id" yaml:"id"`
	DeviceID  int          `boil:"device_id" json:"device_id" toml:"device_id" yaml:"device_id"`
	Field     int16        `boil:"field" json:"field" toml:"field" yaml:"field"`
	Enable    bool         `boil:"enable" json:"enable" toml:"enable" yaml:"enable"`
	AssetID   null.Int     `boil:"asset_id" json:"asset_id,omitempty" toml:"asset_id" yaml:"asset_id,omitempty"`
	Subtype   null.String  `boil:"subtype" json:"subtype,omitempty" toml:"subtype" yaml:"subtype,omitempty"`
	Attribute null.String  `boil:"attribute" json:"attribute,omitempty" toml:"attribute" yaml:"attribute,omitempty"`
	Scale     null.Float64 `boil:"scale" json:"scale,omitempty" toml:"scale" yaml:"scale,omitempty"`
	Zero      null.Float64 `boil:"zero" json:"zero,omitempty" toml:"zero" yaml:"zero,omitempty"`

	R *mbusAccessR `boil:"-" json:"-" toml:"-" yaml:"-"`
	L mbusAccessL  `boil:"-" json:"-" toml:"-" yaml:"-"`
}

var MbusAccessColumns = struct {
	ID        string
	DeviceID  string
	Field     string
	Enable    string
	AssetID   string
	Subtype   string
	Attribute string
	Scale     string
	Zero      string
}{
	ID:        "id",
	DeviceID:  "device_id",
	Field:     "field",
	Enable:    "enable",
	AssetID:   "asset_id",
	Subtype:   "subtype",
	Attribute: "attribute",
	Scale:     "scale",
	Zero:      "zero",
}

var MbusAccessTableColumns = struct {
	ID        string
	DeviceID  string
	Field     string
	Enable    string
	AssetID   string
	Subtype   string
	Attribute string
	Scale     string
	Zero      string
}{
	ID:        "mbus_access.id",
	DeviceID:  "mbus_access.device_id",
	Field:     "mbus_access.field",
	Enable:    "mbus_access.enable",
	AssetID:   "mbus_access.asset_id",
	Subtype:   "mbus_access.subtype",
	Attribute: "mbus_access.attribute",
	Scale:     "mbus_access.scale",
	Zero:      "mbus_access.zero",
}

// Generated where

var MbusAccessWhere = struct {
	ID        whereHelperint
	DeviceID  whereHelperint
	Field     whereHelperint16
	Enable    whereHelperbool
	AssetID   whereHelpernull_Int
	Subtype   whereHelpernull_String
	Attribute whereHelpernull_String
	Scale     whereHelpernull_Float64
	Zero      whereHelpernull_Float64
}{
	ID:        whereHelperint{field: "\"mbus_access\".\"id\""},
	DeviceID:  whereHelperint{field: "\"mbus_access\".\"device_id\""},
	Field:     whereHelperint16{field: "\"mbus_access\".\"field\""},
	Enable:    whereHelperbool{field: "\"mbus_access\".\"enable\""},
	AssetID:   whereHelpernull_Int{field: "\"mbus_access\".\"asset_id\""},
	Subtype:   whereHelpernull_String{field: "\"mbus_access\".\"subtype\""},
	Attribute: whereHelpernull_String{field: "\"mbus_access\".\"attribute\""},
	Scale:     whereHelpernull_Float64{field: "\"mbus_access\".\"scale\""},
	Zero:      whereHelpernull_Float64{field: "\"mbus_access\".\"zero\""},
}

// MbusAccessRels is where relationship names are stored.
var MbusAccessRels = struct {
}{}

// mbusAccessR is where relationships are stored.
type mbusAccessR struct {
}

// NewStruct creates a new relationship struct
func (*mbusAccessR) NewStruct() *mbusAccessR {
	return &mbusAccessR{}
}

// mbusAccessL is where Load methods for each relationship are stored.
type mbusAccessL struct{}

var (
	mbusAccessAllColumns            = []string{"id", "device_id", "field", "enable", "asset_id", "subtype", "attribute", "scale", "zero"}
	mbusAccessColumnsWithoutDefault = []string{"id", "device_id", "field"}
	mbusAccessColumnsWithDefault    = []string{"enable", "asset_id", "subtype", "attribute", "scale", "zero"}
	mbusAccessPrimaryKeyColumns     = []string{"id"}
	mbusAccessGeneratedColumns      = []string{}
)

type (
	// MbusAccessSlice is an alias for a slice of pointers to MbusAccess.
	// This should almost always be used instead of []MbusAccess.
	MbusAccessSlice []*MbusAccess
	// MbusAccessHook is the signature for custom MbusAccess hook methods
	MbusAccessHook func(context.Context, boil.ContextExecutor, *MbusAccess) error

	mbusAccessQuery struct {
		*queries.Query
	}
)

// Cache for insert, update and upsert
var (
	mbusAccessType                 = reflect.TypeOf(&MbusAccess{})
	mbusAccessMapping              = queries.MakeStructMapping(mbusAccessType)
	mbusAccessPrimaryKeyMapping, _ = queries.BindMapping(mbusAccessType, mbusAccessMapping, mbusAccessPrimaryKeyColumns)
	mbusAccessInsertCacheMut       sync.RWMutex
	mbusAccessInsertCache          = make(map[string]insertCache)
	mbusAccessUpdateCacheMut       sync.RWMutex
	mbusAccessUpdateCache          = make(map[string]updateCache)
	mbusAccessUpsertCacheMut       sync.RWMutex
	mbusAccessUpsertCache          = make(map[string]insertCache)
)

var (
	// Force time package dependency for automated UpdatedAt/CreatedAt.
	_ = time.Second
	// Force qmhelper dependency for where clause generation (which doesn't
	// always happen)
	_ = qmhelper.Where
)

var mbusAccessAfterSelectHooks []MbusAccessHook

var mbusAccessBeforeInsertHooks []MbusAccessHook
var mbusAccessAfterInsertHooks []MbusAccessHook

var mbusAccessBeforeUpdateHooks []MbusAccessHook
var mbusAccessAfterUpdateHooks []MbusAccessHook

var mbusAccessBeforeDeleteHooks []MbusAccessHook
var mbusAccessAfterDeleteHooks []MbusAccessHook

var mbusAccessBeforeUpsertHooks []MbusAccessHook
var mbusAccessAfterUpsertHooks []MbusAccessHook

// doAfterSelectHooks executes all "after Select" hooks.
func (o *MbusAccess) doAfterSelectHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range mbusAccessAfterSelectHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeInsertHooks executes all "before insert" hooks.
func (o *MbusAccess) doBeforeInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range mbusAccessBeforeInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterInsertHooks executes all "after Insert" hooks.
func (o *MbusAccess) doAfterInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range mbusAccessAfterInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpdateHooks executes all "before Update" hooks.
func (o *MbusAccess) doBeforeUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range mbusAccessBeforeUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpdateHooks executes all "after Update" hooks.
func (o *MbusAccess) doAfterUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range mbusAccessAfterUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeDeleteHooks executes all "before Delete" hooks.
func (o *MbusAccess) doBeforeDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range mbusAccessBeforeDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterDeleteHooks executes all "after Delete" hooks.
func (o *MbusAccess) doAfterDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range mbusAccessAfterDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpsertHooks executes all "before Upsert" hooks.
func (o *MbusAccess) doBeforeUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range mbusAccessBeforeUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpsertHooks executes all "after Upsert" hooks.
func (o *MbusAccess) doAfterUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range mbusAccessAfterUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// AddMbusAccessHook registers your hook function for all future operations.
func AddMbusAccessHook(hookPoint boil.HookPoint, mbusAccessHook MbusAccessHook) {
	switch hookPoint {
	case boil.AfterSelectHook:
		mbusAccessAfterSelectHooks = append(mbusAccessAfterSelectHooks, mbusAccessHook)
	case boil.BeforeInsertHook:
		mbusAccessBeforeInsertHooks = append(mbusAccessBeforeInsertHooks, mbusAccessHook)
	case boil.AfterInsertHook:
		mbusAccessAfterInsertHooks = append(mbusAccessAfterInsertHooks, mbusAccessHook)
	case boil.BeforeUpdateHook:
		mbusAccessBeforeUpdateHooks = append(mbusAccessBeforeUpdateHooks, mbusAccessHook)
	case boil.AfterUpdateHook:
		mbusAccessAfterUpdateHooks = append(mbusAccessAfterUpdateHooks, mbusAccessHook)
	case boil.BeforeDeleteHook:
		mbusAccessBeforeDeleteHooks = append(mbusAccessBeforeDeleteHooks, mbusAccessHook)
	case boil.AfterDeleteHook:
		mbusAccessAfterDeleteHooks = append(mbusAccessAfterDeleteHooks, mbusAccessHook)
	case boil.BeforeUpsertHook:
		mbusAccessBeforeUpsertHooks = append(mbusAccessBeforeUpsertHooks, mbusAccessHook)
	case boil.AfterUpsertHook:
		mbusAccessAfterUpsertHooks = append(mbusAccessAfterUpsertHooks, mbusAccessHook)
	}
}

// One returns a single mbusAccess record from the query.
func (q mbusAccessQuery) One(ctx context.Context, exec boil.ContextExecutor) (*MbusAccess, error) {
	o := &MbusAccess{}

	queries.SetLimit(q.Query, 1)

	err := q.Bind(ctx, exec, o)
	if err != nil {
		if errors.Is(err, sql.ErrNoRows) {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: failed to execute a one query for mbus_access")
	}

	if err := o.doAfterSelectHooks(ctx, exec); err != nil {
		return o, err
	}

	return o, nil
}

// All returns all MbusAccess records from the query.
func (q mbusAccessQuery) All(ctx context.Context, exec boil.ContextExecutor) (MbusAccessSlice, error) {
	var o []*MbusAccess

	err := q.Bind(ctx, exec, &o)
	if err != nil {
		return nil, errors.Wrap(err, "models: failed to assign all query results to MbusAccess slice")
	}

	if len(mbusAccessAfterSelectHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterSelectHooks(ctx, exec); err != nil {
				return o, err
			}
		}
	}

	return o, nil
}

// Count returns the count of all MbusAccess records in the query.
func (q mbusAccessQuery) Count(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to count mbus_access rows")
	}

	return count, nil
}

// Exists checks if the row exists in the table.
func (q mbusAccessQuery) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)
	queries.SetLimit(q.Query, 1)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return false, errors.Wrap(err, "models: failed to check if mbus_access exists")
	}

	return count > 0, nil
}

// MbusAccesses retrieves all the records using an executor.
func MbusAccesses(mods ...qm.QueryMod) mbusAccessQuery {
	mods = append(mods, qm.From("\"mbus_access\""))
	q := NewQuery(mods...)
	if len(queries.GetSelect(q)) == 0 {
		queries.SetSelect(q, []string{"\"mbus_access\".*"})
	}

	return mbusAccessQuery{q}
}

// FindMbusAccess retrieves a single record by ID with an executor.
// If selectCols is empty Find will return all columns.
func FindMbusAccess(ctx context.Context, exec boil.ContextExecutor, iD int, selectCols ...string) (*MbusAccess, error) {
	mbusAccessObj := &MbusAccess{}

	sel := "*"
	if len(selectCols) > 0 {
		sel = strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, selectCols), ",")
	}
	query := fmt.Sprintf(
		"select %s from \"mbus_access\" where \"id\"=$1", sel,
	)

	q := queries.Raw(query, iD)

	err := q.Bind(ctx, exec, mbusAccessObj)
	if err != nil {
		if errors.Is(err, sql.ErrNoRows) {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: unable to select from mbus_access")
	}

	if err = mbusAccessObj.doAfterSelectHooks(ctx, exec); err != nil {
		return mbusAccessObj, err
	}

	return mbusAccessObj, nil
}

// Insert a single record using an executor.
// See boil.Columns.InsertColumnSet documentation to understand column list inference for inserts.
func (o *MbusAccess) Insert(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) error {
	if o == nil {
		return errors.New("models: no mbus_access provided for insertion")
	}

	var err error

	if err := o.doBeforeInsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(mbusAccessColumnsWithDefault, o)

	key := makeCacheKey(columns, nzDefaults)
	mbusAccessInsertCacheMut.RLock()
	cache, cached := mbusAccessInsertCache[key]
	mbusAccessInsertCacheMut.RUnlock()

	if !cached {
		wl, returnColumns := columns.InsertColumnSet(
			mbusAccessAllColumns,
			mbusAccessColumnsWithDefault,
			mbusAccessColumnsWithoutDefault,
			nzDefaults,
		)

		cache.valueMapping, err = queries.BindMapping(mbusAccessType, mbusAccessMapping, wl)
		if err != nil {
			return err
		}
		cache.retMapping, err = queries.BindMapping(mbusAccessType, mbusAccessMapping, returnColumns)
		if err != nil {
			return err
		}
		if len(wl) != 0 {
			cache.query = fmt.Sprintf("INSERT INTO \"mbus_access\" (\"%s\") %%sVALUES (%s)%%s", strings.Join(wl, "\",\""), strmangle.Placeholders(dialect.UseIndexPlaceholders, len(wl), 1, 1))
		} else {
			cache.query = "INSERT INTO \"mbus_access\" %sDEFAULT VALUES%s"
		}

		var queryOutput, queryReturning string

		if len(cache.retMapping) != 0 {
			queryReturning = fmt.Sprintf(" RETURNING \"%s\"", strings.Join(returnColumns, "\",\""))
		}

		cache.query = fmt.Sprintf(cache.query, queryOutput, queryReturning)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}

	if len(cache.retMapping) != 0 {
		err = exec.QueryRowContext(ctx, cache.query, vals...).Scan(queries.PtrsFromMapping(value, cache.retMapping)...)
	} else {
		_, err = exec.ExecContext(ctx, cache.query, vals...)
	}

	if err != nil {
		return errors.Wrap(err, "models: unable to insert into mbus_access")
	}

	if !cached {
		mbusAccessInsertCacheMut.Lock()
		mbusAccessInsertCache[key] = cache
		mbusAccessInsertCacheMut.Unlock()
	}

	return o.doAfterInsertHooks(ctx, exec)
}

// Update uses an executor to update the MbusAccess.
// See boil.Columns.UpdateColumnSet documentation to understand column list inference for updates.
// Update does not automatically update the record in case of default values. Use .Reload() to refresh the records.
func (o *MbusAccess) Update(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) (int64, error) {
	var err error
	if err = o.doBeforeUpdateHooks(ctx, exec); err != nil {
		return 0, err
	}
	key := makeCacheKey(columns, nil)
	mbusAccessUpdateCacheMut.RLock()
	cache, cached := mbusAccessUpdateCache[key]
	mbusAccessUpdateCacheMut.RUnlock()

	if !cached {
		wl := columns.UpdateColumnSet(
			mbusAccessAllColumns,
			mbusAccessPrimaryKeyColumns,
		)

		if !columns.IsWhitelist() {
			wl = strmangle.SetComplement(wl, []string{"created_at"})
		}
		if len(wl) == 0 {
			return 0, errors.New("models: unable to update mbus_access, could not build whitelist")
		}

		cache.query = fmt.Sprintf("UPDATE \"mbus_access\" SET %s WHERE %s",
			strmangle.SetParamNames("\"", "\"", 1, wl),
			strmangle.WhereClause("\"", "\"", len(wl)+1, mbusAccessPrimaryKeyColumns),
		)
		cache.valueMapping, err = queries.BindMapping(mbusAccessType, mbusAccessMapping, append(wl, mbusAccessPrimaryKeyColumns...))
		if err != nil {
			return 0, err
		}
	}

	values := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, values)
	}
	var result sql.Result
	result, err = exec.ExecContext(ctx, cache.query, values...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update mbus_access row")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by update for mbus_access")
	}

	if !cached {
		mbusAccessUpdateCacheMut.Lock()
		mbusAccessUpdateCache[key] = cache
		mbusAccessUpdateCacheMut.Unlock()
	}

	return rowsAff, o.doAfterUpdateHooks(ctx, exec)
}

// UpdateAll updates all rows with the specified column values.
func (q mbusAccessQuery) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	queries.SetUpdate(q.Query, cols)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update all for mbus_access")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to retrieve rows affected for mbus_access")
	}

	return rowsAff, nil
}

// UpdateAll updates all rows with the specified column values, using an executor.
func (o MbusAccessSlice) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	ln := int64(len(o))
	if ln == 0 {
		return 0, nil
	}

	if len(cols) == 0 {
		return 0, errors.New("models: update all requires at least one column argument")
	}

	colNames := make([]string, len(cols))
	args := make([]interface{}, len(cols))

	i := 0
	for name, value := range cols {
		colNames[i] = name
		args[i] = value
		i++
	}

	// Append all of the primary key values for each column
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), mbusAccessPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := fmt.Sprintf("UPDATE \"mbus_access\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, colNames),
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), len(colNames)+1, mbusAccessPrimaryKeyColumns, len(o)))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update all in mbusAccess slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to retrieve rows affected all in update all mbusAccess")
	}
	return rowsAff, nil
}

// Upsert attempts an insert using an executor, and does an update or ignore on conflict.
// See boil.Columns documentation for how to properly use updateColumns and insertColumns.
func (o *MbusAccess) Upsert(ctx context.Context, exec boil.ContextExecutor, updateOnConflict bool, conflictColumns []string, updateColumns, insertColumns boil.Columns) error {
	if o == nil {
		return errors.New("models: no mbus_access provided for upsert")
	}

	if err := o.doBeforeUpsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(mbusAccessColumnsWithDefault, o)

	// Build cache key in-line uglily - mysql vs psql problems
	buf := strmangle.GetBuffer()
	if updateOnConflict {
		buf.WriteByte('t')
	} else {
		buf.WriteByte('f')
	}
	buf.WriteByte('.')
	for _, c := range conflictColumns {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(updateColumns.Kind))
	for _, c := range updateColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(insertColumns.Kind))
	for _, c := range insertColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzDefaults {
		buf.WriteString(c)
	}
	key := buf.String()
	strmangle.PutBuffer(buf)

	mbusAccessUpsertCacheMut.RLock()
	cache, cached := mbusAccessUpsertCache[key]
	mbusAccessUpsertCacheMut.RUnlock()

	var err error

	if !cached {
		insert, ret := insertColumns.InsertColumnSet(
			mbusAccessAllColumns,
			mbusAccessColumnsWithDefault,
			mbusAccessColumnsWithoutDefault,
			nzDefaults,
		)

		update := updateColumns.UpdateColumnSet(
			mbusAccessAllColumns,
			mbusAccessPrimaryKeyColumns,
		)

		if updateOnConflict && len(update) == 0 {
			return errors.New("models: unable to upsert mbus_access, could not build update column list")
		}

		conflict := conflictColumns
		if len(conflict) == 0 {
			conflict = make([]string, len(mbusAccessPrimaryKeyColumns))
			copy(conflict, mbusAccessPrimaryKeyColumns)
		}
		cache.query = buildUpsertQueryPostgres(dialect, "\"mbus_access\"", updateOnConflict, ret, update, conflict, insert)

		cache.valueMapping, err = queries.BindMapping(mbusAccessType, mbusAccessMapping, insert)
		if err != nil {
			return err
		}
		if len(ret) != 0 {
			cache.retMapping, err = queries.BindMapping(mbusAccessType, mbusAccessMapping, ret)
			if err != nil {
				return err
			}
		}
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)
	var returns []interface{}
	if len(cache.retMapping) != 0 {
		returns = queries.PtrsFromMapping(value, cache.retMapping)
	}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}
	if len(cache.retMapping) != 0 {
		err = exec.QueryRowContext(ctx, cache.query, vals...).Scan(returns...)
		if errors.Is(err, sql.ErrNoRows) {
			err = nil // Postgres doesn't return anything when there's no update
		}
	} else {
		_, err = exec.ExecContext(ctx, cache.query, vals...)
	}
	if err != nil {
		return errors.Wrap(err, "models: unable to upsert mbus_access")
	}

	if !cached {
		mbusAccessUpsertCacheMut.Lock()
		mbusAccessUpsertCache[key] = cache
		mbusAccessUpsertCacheMut.Unlock()
	}

	return o.doAfterUpsertHooks(ctx, exec)
}

// Delete deletes a single MbusAccess record with an executor.
// Delete will match against the primary key column to find the record to delete.
func (o *MbusAccess) Delete(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if o == nil {
		return 0, errors.New("models: no MbusAccess provided for delete")
	}

	if err := o.doBeforeDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	args := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), mbusAccessPrimaryKeyMapping)
	sql := "DELETE FROM \"mbus_access\" WHERE \"id\"=$1"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete from mbus_access")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by delete for mbus_access")
	}

	if err := o.doAfterDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	return rowsAff, nil
}

// DeleteAll deletes all matching rows.
func (q mbusAccessQuery) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if q.Query == nil {
		return 0, errors.New("models: no mbusAccessQuery provided for delete all")
	}

	queries.SetDelete(q.Query)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete all from mbus_access")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by deleteall for mbus_access")
	}

	return rowsAff, nil
}

// DeleteAll deletes all rows in the slice, using an executor.
func (o MbusAccessSlice) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if len(o) == 0 {
		return 0, nil
	}

	if len(mbusAccessBeforeDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doBeforeDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	var args []interface{}
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), mbusAccessPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "DELETE FROM \"mbus_access\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, mbusAccessPrimaryKeyColumns, len(o))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete all from mbusAccess slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by deleteall for mbus_access")
	}

	if len(mbusAccessAfterDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	return rowsAff, nil
}

// Reload refetches the object from the database
// using the primary keys with an executor.
func (o *MbusAccess) Reload(ctx context.Context, exec boil.ContextExecutor) error {
	ret, err := FindMbusAccess(ctx, exec, o.ID)
	if err != nil {
		return err
	}

	*o = *ret
	return nil
}

// ReloadAll refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *MbusAccessSlice) ReloadAll(ctx context.Context, exec boil.ContextExecutor) error {
	if o == nil || len(*o) == 0 {
		return nil
	}

	slice := MbusAccessSlice{}
	var args []interface{}
	for _, obj := range *o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), mbusAccessPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "SELECT \"mbus_access\".* FROM \"mbus_access\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, mbusAccessPrimaryKeyColumns, len(*o))

	q := queries.Raw(sql, args...)

	err := q.Bind(ctx, exec, &slice)
	if err != nil {
		return errors.Wrap(err, "models: unable to reload all in MbusAccessSlice")
	}

	*o = slice

	return nil
}

// MbusAccessExists checks if the MbusAccess row exists.
func MbusAccessExists(ctx context.Context, exec boil.ContextExecutor, iD int) (bool, error) {
	var exists bool
	sql := "select exists(select 1 from \"mbus_access\" where \"id\"=$1 limit 1)"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, iD)
	}
	row := exec.QueryRowContext(ctx, sql, iD)

	err := row.Scan(&exists)
	if err != nil {
		return false, errors.Wrap(err, "models: unable to check if mbus_access exists")
	}

	return exists, nil
}
