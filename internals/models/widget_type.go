// Code generated by SQLBoiler 4.13.0 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package models

import (
	"context"
	"database/sql"
	"fmt"
	"reflect"
	"strconv"
	"strings"
	"sync"
	"time"

	"github.com/friendsofgo/errors"
	"github.com/volatiletech/null/v8"
	"github.com/volatiletech/sqlboiler/v4/boil"
	"github.com/volatiletech/sqlboiler/v4/queries"
	"github.com/volatiletech/sqlboiler/v4/queries/qm"
	"github.com/volatiletech/sqlboiler/v4/queries/qmhelper"
	"github.com/volatiletech/strmangle"
)

// WidgetType is an object representing the database table.
type WidgetType struct {
	TypeID             int         `boil:"type_id" json:"type_id" toml:"type_id" yaml:"type_id"`
	Name               string      `boil:"name" json:"name" toml:"name" yaml:"name"`
	Tag                null.String `boil:"tag" json:"tag,omitempty" toml:"tag" yaml:"tag,omitempty"`
	Translation        null.JSON   `boil:"translation" json:"translation,omitempty" toml:"translation" yaml:"translation,omitempty"`
	Icon               null.String `boil:"icon" json:"icon,omitempty" toml:"icon" yaml:"icon,omitempty"`
	Custom             bool        `boil:"custom" json:"custom" toml:"custom" yaml:"custom"`
	WithAlarm          null.Bool   `boil:"with_alarm" json:"with_alarm,omitempty" toml:"with_alarm" yaml:"with_alarm,omitempty"`
	WithTimespanSelect null.Bool   `boil:"with_timespan_select" json:"with_timespan_select,omitempty" toml:"with_timespan_select" yaml:"with_timespan_select,omitempty"`

	R *widgetTypeR `boil:"-" json:"-" toml:"-" yaml:"-"`
	L widgetTypeL  `boil:"-" json:"-" toml:"-" yaml:"-"`
}

var WidgetTypeColumns = struct {
	TypeID             string
	Name               string
	Tag                string
	Translation        string
	Icon               string
	Custom             string
	WithAlarm          string
	WithTimespanSelect string
}{
	TypeID:             "type_id",
	Name:               "name",
	Tag:                "tag",
	Translation:        "translation",
	Icon:               "icon",
	Custom:             "custom",
	WithAlarm:          "with_alarm",
	WithTimespanSelect: "with_timespan_select",
}

var WidgetTypeTableColumns = struct {
	TypeID             string
	Name               string
	Tag                string
	Translation        string
	Icon               string
	Custom             string
	WithAlarm          string
	WithTimespanSelect string
}{
	TypeID:             "widget_type.type_id",
	Name:               "widget_type.name",
	Tag:                "widget_type.tag",
	Translation:        "widget_type.translation",
	Icon:               "widget_type.icon",
	Custom:             "widget_type.custom",
	WithAlarm:          "widget_type.with_alarm",
	WithTimespanSelect: "widget_type.with_timespan_select",
}

// Generated where

var WidgetTypeWhere = struct {
	TypeID             whereHelperint
	Name               whereHelperstring
	Tag                whereHelpernull_String
	Translation        whereHelpernull_JSON
	Icon               whereHelpernull_String
	Custom             whereHelperbool
	WithAlarm          whereHelpernull_Bool
	WithTimespanSelect whereHelpernull_Bool
}{
	TypeID:             whereHelperint{field: "\"widget_type\".\"type_id\""},
	Name:               whereHelperstring{field: "\"widget_type\".\"name\""},
	Tag:                whereHelpernull_String{field: "\"widget_type\".\"tag\""},
	Translation:        whereHelpernull_JSON{field: "\"widget_type\".\"translation\""},
	Icon:               whereHelpernull_String{field: "\"widget_type\".\"icon\""},
	Custom:             whereHelperbool{field: "\"widget_type\".\"custom\""},
	WithAlarm:          whereHelpernull_Bool{field: "\"widget_type\".\"with_alarm\""},
	WithTimespanSelect: whereHelpernull_Bool{field: "\"widget_type\".\"with_timespan_select\""},
}

// WidgetTypeRels is where relationship names are stored.
var WidgetTypeRels = struct {
}{}

// widgetTypeR is where relationships are stored.
type widgetTypeR struct {
}

// NewStruct creates a new relationship struct
func (*widgetTypeR) NewStruct() *widgetTypeR {
	return &widgetTypeR{}
}

// widgetTypeL is where Load methods for each relationship are stored.
type widgetTypeL struct{}

var (
	widgetTypeAllColumns            = []string{"type_id", "name", "tag", "translation", "icon", "custom", "with_alarm", "with_timespan_select"}
	widgetTypeColumnsWithoutDefault = []string{"name"}
	widgetTypeColumnsWithDefault    = []string{"type_id", "tag", "translation", "icon", "custom", "with_alarm", "with_timespan_select"}
	widgetTypePrimaryKeyColumns     = []string{"type_id"}
	widgetTypeGeneratedColumns      = []string{}
)

type (
	// WidgetTypeSlice is an alias for a slice of pointers to WidgetType.
	// This should almost always be used instead of []WidgetType.
	WidgetTypeSlice []*WidgetType
	// WidgetTypeHook is the signature for custom WidgetType hook methods
	WidgetTypeHook func(context.Context, boil.ContextExecutor, *WidgetType) error

	widgetTypeQuery struct {
		*queries.Query
	}
)

// Cache for insert, update and upsert
var (
	widgetTypeType                 = reflect.TypeOf(&WidgetType{})
	widgetTypeMapping              = queries.MakeStructMapping(widgetTypeType)
	widgetTypePrimaryKeyMapping, _ = queries.BindMapping(widgetTypeType, widgetTypeMapping, widgetTypePrimaryKeyColumns)
	widgetTypeInsertCacheMut       sync.RWMutex
	widgetTypeInsertCache          = make(map[string]insertCache)
	widgetTypeUpdateCacheMut       sync.RWMutex
	widgetTypeUpdateCache          = make(map[string]updateCache)
	widgetTypeUpsertCacheMut       sync.RWMutex
	widgetTypeUpsertCache          = make(map[string]insertCache)
)

var (
	// Force time package dependency for automated UpdatedAt/CreatedAt.
	_ = time.Second
	// Force qmhelper dependency for where clause generation (which doesn't
	// always happen)
	_ = qmhelper.Where
)

var widgetTypeAfterSelectHooks []WidgetTypeHook

var widgetTypeBeforeInsertHooks []WidgetTypeHook
var widgetTypeAfterInsertHooks []WidgetTypeHook

var widgetTypeBeforeUpdateHooks []WidgetTypeHook
var widgetTypeAfterUpdateHooks []WidgetTypeHook

var widgetTypeBeforeDeleteHooks []WidgetTypeHook
var widgetTypeAfterDeleteHooks []WidgetTypeHook

var widgetTypeBeforeUpsertHooks []WidgetTypeHook
var widgetTypeAfterUpsertHooks []WidgetTypeHook

// doAfterSelectHooks executes all "after Select" hooks.
func (o *WidgetType) doAfterSelectHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range widgetTypeAfterSelectHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeInsertHooks executes all "before insert" hooks.
func (o *WidgetType) doBeforeInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range widgetTypeBeforeInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterInsertHooks executes all "after Insert" hooks.
func (o *WidgetType) doAfterInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range widgetTypeAfterInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpdateHooks executes all "before Update" hooks.
func (o *WidgetType) doBeforeUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range widgetTypeBeforeUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpdateHooks executes all "after Update" hooks.
func (o *WidgetType) doAfterUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range widgetTypeAfterUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeDeleteHooks executes all "before Delete" hooks.
func (o *WidgetType) doBeforeDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range widgetTypeBeforeDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterDeleteHooks executes all "after Delete" hooks.
func (o *WidgetType) doAfterDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range widgetTypeAfterDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpsertHooks executes all "before Upsert" hooks.
func (o *WidgetType) doBeforeUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range widgetTypeBeforeUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpsertHooks executes all "after Upsert" hooks.
func (o *WidgetType) doAfterUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range widgetTypeAfterUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// AddWidgetTypeHook registers your hook function for all future operations.
func AddWidgetTypeHook(hookPoint boil.HookPoint, widgetTypeHook WidgetTypeHook) {
	switch hookPoint {
	case boil.AfterSelectHook:
		widgetTypeAfterSelectHooks = append(widgetTypeAfterSelectHooks, widgetTypeHook)
	case boil.BeforeInsertHook:
		widgetTypeBeforeInsertHooks = append(widgetTypeBeforeInsertHooks, widgetTypeHook)
	case boil.AfterInsertHook:
		widgetTypeAfterInsertHooks = append(widgetTypeAfterInsertHooks, widgetTypeHook)
	case boil.BeforeUpdateHook:
		widgetTypeBeforeUpdateHooks = append(widgetTypeBeforeUpdateHooks, widgetTypeHook)
	case boil.AfterUpdateHook:
		widgetTypeAfterUpdateHooks = append(widgetTypeAfterUpdateHooks, widgetTypeHook)
	case boil.BeforeDeleteHook:
		widgetTypeBeforeDeleteHooks = append(widgetTypeBeforeDeleteHooks, widgetTypeHook)
	case boil.AfterDeleteHook:
		widgetTypeAfterDeleteHooks = append(widgetTypeAfterDeleteHooks, widgetTypeHook)
	case boil.BeforeUpsertHook:
		widgetTypeBeforeUpsertHooks = append(widgetTypeBeforeUpsertHooks, widgetTypeHook)
	case boil.AfterUpsertHook:
		widgetTypeAfterUpsertHooks = append(widgetTypeAfterUpsertHooks, widgetTypeHook)
	}
}

// One returns a single widgetType record from the query.
func (q widgetTypeQuery) One(ctx context.Context, exec boil.ContextExecutor) (*WidgetType, error) {
	o := &WidgetType{}

	queries.SetLimit(q.Query, 1)

	err := q.Bind(ctx, exec, o)
	if err != nil {
		if errors.Is(err, sql.ErrNoRows) {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: failed to execute a one query for widget_type")
	}

	if err := o.doAfterSelectHooks(ctx, exec); err != nil {
		return o, err
	}

	return o, nil
}

// All returns all WidgetType records from the query.
func (q widgetTypeQuery) All(ctx context.Context, exec boil.ContextExecutor) (WidgetTypeSlice, error) {
	var o []*WidgetType

	err := q.Bind(ctx, exec, &o)
	if err != nil {
		return nil, errors.Wrap(err, "models: failed to assign all query results to WidgetType slice")
	}

	if len(widgetTypeAfterSelectHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterSelectHooks(ctx, exec); err != nil {
				return o, err
			}
		}
	}

	return o, nil
}

// Count returns the count of all WidgetType records in the query.
func (q widgetTypeQuery) Count(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to count widget_type rows")
	}

	return count, nil
}

// Exists checks if the row exists in the table.
func (q widgetTypeQuery) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)
	queries.SetLimit(q.Query, 1)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return false, errors.Wrap(err, "models: failed to check if widget_type exists")
	}

	return count > 0, nil
}

// WidgetTypes retrieves all the records using an executor.
func WidgetTypes(mods ...qm.QueryMod) widgetTypeQuery {
	mods = append(mods, qm.From("\"widget_type\""))
	q := NewQuery(mods...)
	if len(queries.GetSelect(q)) == 0 {
		queries.SetSelect(q, []string{"\"widget_type\".*"})
	}

	return widgetTypeQuery{q}
}

// FindWidgetType retrieves a single record by ID with an executor.
// If selectCols is empty Find will return all columns.
func FindWidgetType(ctx context.Context, exec boil.ContextExecutor, typeID int, selectCols ...string) (*WidgetType, error) {
	widgetTypeObj := &WidgetType{}

	sel := "*"
	if len(selectCols) > 0 {
		sel = strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, selectCols), ",")
	}
	query := fmt.Sprintf(
		"select %s from \"widget_type\" where \"type_id\"=$1", sel,
	)

	q := queries.Raw(query, typeID)

	err := q.Bind(ctx, exec, widgetTypeObj)
	if err != nil {
		if errors.Is(err, sql.ErrNoRows) {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: unable to select from widget_type")
	}

	if err = widgetTypeObj.doAfterSelectHooks(ctx, exec); err != nil {
		return widgetTypeObj, err
	}

	return widgetTypeObj, nil
}

// Insert a single record using an executor.
// See boil.Columns.InsertColumnSet documentation to understand column list inference for inserts.
func (o *WidgetType) Insert(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) error {
	if o == nil {
		return errors.New("models: no widget_type provided for insertion")
	}

	var err error

	if err := o.doBeforeInsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(widgetTypeColumnsWithDefault, o)

	key := makeCacheKey(columns, nzDefaults)
	widgetTypeInsertCacheMut.RLock()
	cache, cached := widgetTypeInsertCache[key]
	widgetTypeInsertCacheMut.RUnlock()

	if !cached {
		wl, returnColumns := columns.InsertColumnSet(
			widgetTypeAllColumns,
			widgetTypeColumnsWithDefault,
			widgetTypeColumnsWithoutDefault,
			nzDefaults,
		)

		cache.valueMapping, err = queries.BindMapping(widgetTypeType, widgetTypeMapping, wl)
		if err != nil {
			return err
		}
		cache.retMapping, err = queries.BindMapping(widgetTypeType, widgetTypeMapping, returnColumns)
		if err != nil {
			return err
		}
		if len(wl) != 0 {
			cache.query = fmt.Sprintf("INSERT INTO \"widget_type\" (\"%s\") %%sVALUES (%s)%%s", strings.Join(wl, "\",\""), strmangle.Placeholders(dialect.UseIndexPlaceholders, len(wl), 1, 1))
		} else {
			cache.query = "INSERT INTO \"widget_type\" %sDEFAULT VALUES%s"
		}

		var queryOutput, queryReturning string

		if len(cache.retMapping) != 0 {
			queryReturning = fmt.Sprintf(" RETURNING \"%s\"", strings.Join(returnColumns, "\",\""))
		}

		cache.query = fmt.Sprintf(cache.query, queryOutput, queryReturning)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}

	if len(cache.retMapping) != 0 {
		err = exec.QueryRowContext(ctx, cache.query, vals...).Scan(queries.PtrsFromMapping(value, cache.retMapping)...)
	} else {
		_, err = exec.ExecContext(ctx, cache.query, vals...)
	}

	if err != nil {
		return errors.Wrap(err, "models: unable to insert into widget_type")
	}

	if !cached {
		widgetTypeInsertCacheMut.Lock()
		widgetTypeInsertCache[key] = cache
		widgetTypeInsertCacheMut.Unlock()
	}

	return o.doAfterInsertHooks(ctx, exec)
}

// Update uses an executor to update the WidgetType.
// See boil.Columns.UpdateColumnSet documentation to understand column list inference for updates.
// Update does not automatically update the record in case of default values. Use .Reload() to refresh the records.
func (o *WidgetType) Update(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) (int64, error) {
	var err error
	if err = o.doBeforeUpdateHooks(ctx, exec); err != nil {
		return 0, err
	}
	key := makeCacheKey(columns, nil)
	widgetTypeUpdateCacheMut.RLock()
	cache, cached := widgetTypeUpdateCache[key]
	widgetTypeUpdateCacheMut.RUnlock()

	if !cached {
		wl := columns.UpdateColumnSet(
			widgetTypeAllColumns,
			widgetTypePrimaryKeyColumns,
		)

		if !columns.IsWhitelist() {
			wl = strmangle.SetComplement(wl, []string{"created_at"})
		}
		if len(wl) == 0 {
			return 0, errors.New("models: unable to update widget_type, could not build whitelist")
		}

		cache.query = fmt.Sprintf("UPDATE \"widget_type\" SET %s WHERE %s",
			strmangle.SetParamNames("\"", "\"", 1, wl),
			strmangle.WhereClause("\"", "\"", len(wl)+1, widgetTypePrimaryKeyColumns),
		)
		cache.valueMapping, err = queries.BindMapping(widgetTypeType, widgetTypeMapping, append(wl, widgetTypePrimaryKeyColumns...))
		if err != nil {
			return 0, err
		}
	}

	values := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, values)
	}
	var result sql.Result
	result, err = exec.ExecContext(ctx, cache.query, values...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update widget_type row")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by update for widget_type")
	}

	if !cached {
		widgetTypeUpdateCacheMut.Lock()
		widgetTypeUpdateCache[key] = cache
		widgetTypeUpdateCacheMut.Unlock()
	}

	return rowsAff, o.doAfterUpdateHooks(ctx, exec)
}

// UpdateAll updates all rows with the specified column values.
func (q widgetTypeQuery) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	queries.SetUpdate(q.Query, cols)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update all for widget_type")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to retrieve rows affected for widget_type")
	}

	return rowsAff, nil
}

// UpdateAll updates all rows with the specified column values, using an executor.
func (o WidgetTypeSlice) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	ln := int64(len(o))
	if ln == 0 {
		return 0, nil
	}

	if len(cols) == 0 {
		return 0, errors.New("models: update all requires at least one column argument")
	}

	colNames := make([]string, len(cols))
	args := make([]interface{}, len(cols))

	i := 0
	for name, value := range cols {
		colNames[i] = name
		args[i] = value
		i++
	}

	// Append all of the primary key values for each column
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), widgetTypePrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := fmt.Sprintf("UPDATE \"widget_type\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, colNames),
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), len(colNames)+1, widgetTypePrimaryKeyColumns, len(o)))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update all in widgetType slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to retrieve rows affected all in update all widgetType")
	}
	return rowsAff, nil
}

// Upsert attempts an insert using an executor, and does an update or ignore on conflict.
// See boil.Columns documentation for how to properly use updateColumns and insertColumns.
func (o *WidgetType) Upsert(ctx context.Context, exec boil.ContextExecutor, updateOnConflict bool, conflictColumns []string, updateColumns, insertColumns boil.Columns) error {
	if o == nil {
		return errors.New("models: no widget_type provided for upsert")
	}

	if err := o.doBeforeUpsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(widgetTypeColumnsWithDefault, o)

	// Build cache key in-line uglily - mysql vs psql problems
	buf := strmangle.GetBuffer()
	if updateOnConflict {
		buf.WriteByte('t')
	} else {
		buf.WriteByte('f')
	}
	buf.WriteByte('.')
	for _, c := range conflictColumns {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(updateColumns.Kind))
	for _, c := range updateColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(insertColumns.Kind))
	for _, c := range insertColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzDefaults {
		buf.WriteString(c)
	}
	key := buf.String()
	strmangle.PutBuffer(buf)

	widgetTypeUpsertCacheMut.RLock()
	cache, cached := widgetTypeUpsertCache[key]
	widgetTypeUpsertCacheMut.RUnlock()

	var err error

	if !cached {
		insert, ret := insertColumns.InsertColumnSet(
			widgetTypeAllColumns,
			widgetTypeColumnsWithDefault,
			widgetTypeColumnsWithoutDefault,
			nzDefaults,
		)

		update := updateColumns.UpdateColumnSet(
			widgetTypeAllColumns,
			widgetTypePrimaryKeyColumns,
		)

		if updateOnConflict && len(update) == 0 {
			return errors.New("models: unable to upsert widget_type, could not build update column list")
		}

		conflict := conflictColumns
		if len(conflict) == 0 {
			conflict = make([]string, len(widgetTypePrimaryKeyColumns))
			copy(conflict, widgetTypePrimaryKeyColumns)
		}
		cache.query = buildUpsertQueryPostgres(dialect, "\"widget_type\"", updateOnConflict, ret, update, conflict, insert)

		cache.valueMapping, err = queries.BindMapping(widgetTypeType, widgetTypeMapping, insert)
		if err != nil {
			return err
		}
		if len(ret) != 0 {
			cache.retMapping, err = queries.BindMapping(widgetTypeType, widgetTypeMapping, ret)
			if err != nil {
				return err
			}
		}
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)
	var returns []interface{}
	if len(cache.retMapping) != 0 {
		returns = queries.PtrsFromMapping(value, cache.retMapping)
	}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}
	if len(cache.retMapping) != 0 {
		err = exec.QueryRowContext(ctx, cache.query, vals...).Scan(returns...)
		if errors.Is(err, sql.ErrNoRows) {
			err = nil // Postgres doesn't return anything when there's no update
		}
	} else {
		_, err = exec.ExecContext(ctx, cache.query, vals...)
	}
	if err != nil {
		return errors.Wrap(err, "models: unable to upsert widget_type")
	}

	if !cached {
		widgetTypeUpsertCacheMut.Lock()
		widgetTypeUpsertCache[key] = cache
		widgetTypeUpsertCacheMut.Unlock()
	}

	return o.doAfterUpsertHooks(ctx, exec)
}

// Delete deletes a single WidgetType record with an executor.
// Delete will match against the primary key column to find the record to delete.
func (o *WidgetType) Delete(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if o == nil {
		return 0, errors.New("models: no WidgetType provided for delete")
	}

	if err := o.doBeforeDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	args := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), widgetTypePrimaryKeyMapping)
	sql := "DELETE FROM \"widget_type\" WHERE \"type_id\"=$1"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete from widget_type")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by delete for widget_type")
	}

	if err := o.doAfterDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	return rowsAff, nil
}

// DeleteAll deletes all matching rows.
func (q widgetTypeQuery) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if q.Query == nil {
		return 0, errors.New("models: no widgetTypeQuery provided for delete all")
	}

	queries.SetDelete(q.Query)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete all from widget_type")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by deleteall for widget_type")
	}

	return rowsAff, nil
}

// DeleteAll deletes all rows in the slice, using an executor.
func (o WidgetTypeSlice) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if len(o) == 0 {
		return 0, nil
	}

	if len(widgetTypeBeforeDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doBeforeDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	var args []interface{}
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), widgetTypePrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "DELETE FROM \"widget_type\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, widgetTypePrimaryKeyColumns, len(o))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete all from widgetType slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by deleteall for widget_type")
	}

	if len(widgetTypeAfterDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	return rowsAff, nil
}

// Reload refetches the object from the database
// using the primary keys with an executor.
func (o *WidgetType) Reload(ctx context.Context, exec boil.ContextExecutor) error {
	ret, err := FindWidgetType(ctx, exec, o.TypeID)
	if err != nil {
		return err
	}

	*o = *ret
	return nil
}

// ReloadAll refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *WidgetTypeSlice) ReloadAll(ctx context.Context, exec boil.ContextExecutor) error {
	if o == nil || len(*o) == 0 {
		return nil
	}

	slice := WidgetTypeSlice{}
	var args []interface{}
	for _, obj := range *o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), widgetTypePrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "SELECT \"widget_type\".* FROM \"widget_type\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, widgetTypePrimaryKeyColumns, len(*o))

	q := queries.Raw(sql, args...)

	err := q.Bind(ctx, exec, &slice)
	if err != nil {
		return errors.Wrap(err, "models: unable to reload all in WidgetTypeSlice")
	}

	*o = slice

	return nil
}

// WidgetTypeExists checks if the WidgetType row exists.
func WidgetTypeExists(ctx context.Context, exec boil.ContextExecutor, typeID int) (bool, error) {
	var exists bool
	sql := "select exists(select 1 from \"widget_type\" where \"type_id\"=$1 limit 1)"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, typeID)
	}
	row := exec.QueryRowContext(ctx, sql, typeID)

	err := row.Scan(&exists)
	if err != nil {
		return false, errors.Wrap(err, "models: unable to check if widget_type exists")
	}

	return exists, nil
}
