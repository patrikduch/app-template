// Code generated by SQLBoiler 4.13.0 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package models

import (
	"context"
	"database/sql"
	"fmt"
	"reflect"
	"strconv"
	"strings"
	"sync"
	"time"

	"github.com/friendsofgo/errors"
	"github.com/volatiletech/null/v8"
	"github.com/volatiletech/sqlboiler/v4/boil"
	"github.com/volatiletech/sqlboiler/v4/queries"
	"github.com/volatiletech/sqlboiler/v4/queries/qm"
	"github.com/volatiletech/sqlboiler/v4/queries/qmhelper"
	"github.com/volatiletech/strmangle"
)

// Dashboard is an object representing the database table.
type Dashboard struct {
	DashboardID int         `boil:"dashboard_id" json:"dashboard_id" toml:"dashboard_id" yaml:"dashboard_id"`
	UserID      string      `boil:"user_id" json:"user_id" toml:"user_id" yaml:"user_id"`
	ProjID      string      `boil:"proj_id" json:"proj_id" toml:"proj_id" yaml:"proj_id"`
	Name        null.String `boil:"name" json:"name,omitempty" toml:"name" yaml:"name,omitempty"`
	Seq         null.Int16  `boil:"seq" json:"seq,omitempty" toml:"seq" yaml:"seq,omitempty"`

	R *dashboardR `boil:"-" json:"-" toml:"-" yaml:"-"`
	L dashboardL  `boil:"-" json:"-" toml:"-" yaml:"-"`
}

var DashboardColumns = struct {
	DashboardID string
	UserID      string
	ProjID      string
	Name        string
	Seq         string
}{
	DashboardID: "dashboard_id",
	UserID:      "user_id",
	ProjID:      "proj_id",
	Name:        "name",
	Seq:         "seq",
}

var DashboardTableColumns = struct {
	DashboardID string
	UserID      string
	ProjID      string
	Name        string
	Seq         string
}{
	DashboardID: "dashboard.dashboard_id",
	UserID:      "dashboard.user_id",
	ProjID:      "dashboard.proj_id",
	Name:        "dashboard.name",
	Seq:         "dashboard.seq",
}

// Generated where

var DashboardWhere = struct {
	DashboardID whereHelperint
	UserID      whereHelperstring
	ProjID      whereHelperstring
	Name        whereHelpernull_String
	Seq         whereHelpernull_Int16
}{
	DashboardID: whereHelperint{field: "\"dashboard\".\"dashboard_id\""},
	UserID:      whereHelperstring{field: "\"dashboard\".\"user_id\""},
	ProjID:      whereHelperstring{field: "\"dashboard\".\"proj_id\""},
	Name:        whereHelpernull_String{field: "\"dashboard\".\"name\""},
	Seq:         whereHelpernull_Int16{field: "\"dashboard\".\"seq\""},
}

// DashboardRels is where relationship names are stored.
var DashboardRels = struct {
}{}

// dashboardR is where relationships are stored.
type dashboardR struct {
}

// NewStruct creates a new relationship struct
func (*dashboardR) NewStruct() *dashboardR {
	return &dashboardR{}
}

// dashboardL is where Load methods for each relationship are stored.
type dashboardL struct{}

var (
	dashboardAllColumns            = []string{"dashboard_id", "user_id", "proj_id", "name", "seq"}
	dashboardColumnsWithoutDefault = []string{"user_id", "proj_id"}
	dashboardColumnsWithDefault    = []string{"dashboard_id", "name", "seq"}
	dashboardPrimaryKeyColumns     = []string{"user_id", "proj_id", "dashboard_id"}
	dashboardGeneratedColumns      = []string{}
)

type (
	// DashboardSlice is an alias for a slice of pointers to Dashboard.
	// This should almost always be used instead of []Dashboard.
	DashboardSlice []*Dashboard
	// DashboardHook is the signature for custom Dashboard hook methods
	DashboardHook func(context.Context, boil.ContextExecutor, *Dashboard) error

	dashboardQuery struct {
		*queries.Query
	}
)

// Cache for insert, update and upsert
var (
	dashboardType                 = reflect.TypeOf(&Dashboard{})
	dashboardMapping              = queries.MakeStructMapping(dashboardType)
	dashboardPrimaryKeyMapping, _ = queries.BindMapping(dashboardType, dashboardMapping, dashboardPrimaryKeyColumns)
	dashboardInsertCacheMut       sync.RWMutex
	dashboardInsertCache          = make(map[string]insertCache)
	dashboardUpdateCacheMut       sync.RWMutex
	dashboardUpdateCache          = make(map[string]updateCache)
	dashboardUpsertCacheMut       sync.RWMutex
	dashboardUpsertCache          = make(map[string]insertCache)
)

var (
	// Force time package dependency for automated UpdatedAt/CreatedAt.
	_ = time.Second
	// Force qmhelper dependency for where clause generation (which doesn't
	// always happen)
	_ = qmhelper.Where
)

var dashboardAfterSelectHooks []DashboardHook

var dashboardBeforeInsertHooks []DashboardHook
var dashboardAfterInsertHooks []DashboardHook

var dashboardBeforeUpdateHooks []DashboardHook
var dashboardAfterUpdateHooks []DashboardHook

var dashboardBeforeDeleteHooks []DashboardHook
var dashboardAfterDeleteHooks []DashboardHook

var dashboardBeforeUpsertHooks []DashboardHook
var dashboardAfterUpsertHooks []DashboardHook

// doAfterSelectHooks executes all "after Select" hooks.
func (o *Dashboard) doAfterSelectHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range dashboardAfterSelectHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeInsertHooks executes all "before insert" hooks.
func (o *Dashboard) doBeforeInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range dashboardBeforeInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterInsertHooks executes all "after Insert" hooks.
func (o *Dashboard) doAfterInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range dashboardAfterInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpdateHooks executes all "before Update" hooks.
func (o *Dashboard) doBeforeUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range dashboardBeforeUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpdateHooks executes all "after Update" hooks.
func (o *Dashboard) doAfterUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range dashboardAfterUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeDeleteHooks executes all "before Delete" hooks.
func (o *Dashboard) doBeforeDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range dashboardBeforeDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterDeleteHooks executes all "after Delete" hooks.
func (o *Dashboard) doAfterDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range dashboardAfterDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpsertHooks executes all "before Upsert" hooks.
func (o *Dashboard) doBeforeUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range dashboardBeforeUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpsertHooks executes all "after Upsert" hooks.
func (o *Dashboard) doAfterUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range dashboardAfterUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// AddDashboardHook registers your hook function for all future operations.
func AddDashboardHook(hookPoint boil.HookPoint, dashboardHook DashboardHook) {
	switch hookPoint {
	case boil.AfterSelectHook:
		dashboardAfterSelectHooks = append(dashboardAfterSelectHooks, dashboardHook)
	case boil.BeforeInsertHook:
		dashboardBeforeInsertHooks = append(dashboardBeforeInsertHooks, dashboardHook)
	case boil.AfterInsertHook:
		dashboardAfterInsertHooks = append(dashboardAfterInsertHooks, dashboardHook)
	case boil.BeforeUpdateHook:
		dashboardBeforeUpdateHooks = append(dashboardBeforeUpdateHooks, dashboardHook)
	case boil.AfterUpdateHook:
		dashboardAfterUpdateHooks = append(dashboardAfterUpdateHooks, dashboardHook)
	case boil.BeforeDeleteHook:
		dashboardBeforeDeleteHooks = append(dashboardBeforeDeleteHooks, dashboardHook)
	case boil.AfterDeleteHook:
		dashboardAfterDeleteHooks = append(dashboardAfterDeleteHooks, dashboardHook)
	case boil.BeforeUpsertHook:
		dashboardBeforeUpsertHooks = append(dashboardBeforeUpsertHooks, dashboardHook)
	case boil.AfterUpsertHook:
		dashboardAfterUpsertHooks = append(dashboardAfterUpsertHooks, dashboardHook)
	}
}

// One returns a single dashboard record from the query.
func (q dashboardQuery) One(ctx context.Context, exec boil.ContextExecutor) (*Dashboard, error) {
	o := &Dashboard{}

	queries.SetLimit(q.Query, 1)

	err := q.Bind(ctx, exec, o)
	if err != nil {
		if errors.Is(err, sql.ErrNoRows) {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: failed to execute a one query for dashboard")
	}

	if err := o.doAfterSelectHooks(ctx, exec); err != nil {
		return o, err
	}

	return o, nil
}

// All returns all Dashboard records from the query.
func (q dashboardQuery) All(ctx context.Context, exec boil.ContextExecutor) (DashboardSlice, error) {
	var o []*Dashboard

	err := q.Bind(ctx, exec, &o)
	if err != nil {
		return nil, errors.Wrap(err, "models: failed to assign all query results to Dashboard slice")
	}

	if len(dashboardAfterSelectHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterSelectHooks(ctx, exec); err != nil {
				return o, err
			}
		}
	}

	return o, nil
}

// Count returns the count of all Dashboard records in the query.
func (q dashboardQuery) Count(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to count dashboard rows")
	}

	return count, nil
}

// Exists checks if the row exists in the table.
func (q dashboardQuery) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)
	queries.SetLimit(q.Query, 1)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return false, errors.Wrap(err, "models: failed to check if dashboard exists")
	}

	return count > 0, nil
}

// Dashboards retrieves all the records using an executor.
func Dashboards(mods ...qm.QueryMod) dashboardQuery {
	mods = append(mods, qm.From("\"dashboard\""))
	q := NewQuery(mods...)
	if len(queries.GetSelect(q)) == 0 {
		queries.SetSelect(q, []string{"\"dashboard\".*"})
	}

	return dashboardQuery{q}
}

// FindDashboard retrieves a single record by ID with an executor.
// If selectCols is empty Find will return all columns.
func FindDashboard(ctx context.Context, exec boil.ContextExecutor, userID string, projID string, dashboardID int, selectCols ...string) (*Dashboard, error) {
	dashboardObj := &Dashboard{}

	sel := "*"
	if len(selectCols) > 0 {
		sel = strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, selectCols), ",")
	}
	query := fmt.Sprintf(
		"select %s from \"dashboard\" where \"user_id\"=$1 AND \"proj_id\"=$2 AND \"dashboard_id\"=$3", sel,
	)

	q := queries.Raw(query, userID, projID, dashboardID)

	err := q.Bind(ctx, exec, dashboardObj)
	if err != nil {
		if errors.Is(err, sql.ErrNoRows) {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: unable to select from dashboard")
	}

	if err = dashboardObj.doAfterSelectHooks(ctx, exec); err != nil {
		return dashboardObj, err
	}

	return dashboardObj, nil
}

// Insert a single record using an executor.
// See boil.Columns.InsertColumnSet documentation to understand column list inference for inserts.
func (o *Dashboard) Insert(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) error {
	if o == nil {
		return errors.New("models: no dashboard provided for insertion")
	}

	var err error

	if err := o.doBeforeInsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(dashboardColumnsWithDefault, o)

	key := makeCacheKey(columns, nzDefaults)
	dashboardInsertCacheMut.RLock()
	cache, cached := dashboardInsertCache[key]
	dashboardInsertCacheMut.RUnlock()

	if !cached {
		wl, returnColumns := columns.InsertColumnSet(
			dashboardAllColumns,
			dashboardColumnsWithDefault,
			dashboardColumnsWithoutDefault,
			nzDefaults,
		)

		cache.valueMapping, err = queries.BindMapping(dashboardType, dashboardMapping, wl)
		if err != nil {
			return err
		}
		cache.retMapping, err = queries.BindMapping(dashboardType, dashboardMapping, returnColumns)
		if err != nil {
			return err
		}
		if len(wl) != 0 {
			cache.query = fmt.Sprintf("INSERT INTO \"dashboard\" (\"%s\") %%sVALUES (%s)%%s", strings.Join(wl, "\",\""), strmangle.Placeholders(dialect.UseIndexPlaceholders, len(wl), 1, 1))
		} else {
			cache.query = "INSERT INTO \"dashboard\" %sDEFAULT VALUES%s"
		}

		var queryOutput, queryReturning string

		if len(cache.retMapping) != 0 {
			queryReturning = fmt.Sprintf(" RETURNING \"%s\"", strings.Join(returnColumns, "\",\""))
		}

		cache.query = fmt.Sprintf(cache.query, queryOutput, queryReturning)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}

	if len(cache.retMapping) != 0 {
		err = exec.QueryRowContext(ctx, cache.query, vals...).Scan(queries.PtrsFromMapping(value, cache.retMapping)...)
	} else {
		_, err = exec.ExecContext(ctx, cache.query, vals...)
	}

	if err != nil {
		return errors.Wrap(err, "models: unable to insert into dashboard")
	}

	if !cached {
		dashboardInsertCacheMut.Lock()
		dashboardInsertCache[key] = cache
		dashboardInsertCacheMut.Unlock()
	}

	return o.doAfterInsertHooks(ctx, exec)
}

// Update uses an executor to update the Dashboard.
// See boil.Columns.UpdateColumnSet documentation to understand column list inference for updates.
// Update does not automatically update the record in case of default values. Use .Reload() to refresh the records.
func (o *Dashboard) Update(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) (int64, error) {
	var err error
	if err = o.doBeforeUpdateHooks(ctx, exec); err != nil {
		return 0, err
	}
	key := makeCacheKey(columns, nil)
	dashboardUpdateCacheMut.RLock()
	cache, cached := dashboardUpdateCache[key]
	dashboardUpdateCacheMut.RUnlock()

	if !cached {
		wl := columns.UpdateColumnSet(
			dashboardAllColumns,
			dashboardPrimaryKeyColumns,
		)

		if !columns.IsWhitelist() {
			wl = strmangle.SetComplement(wl, []string{"created_at"})
		}
		if len(wl) == 0 {
			return 0, errors.New("models: unable to update dashboard, could not build whitelist")
		}

		cache.query = fmt.Sprintf("UPDATE \"dashboard\" SET %s WHERE %s",
			strmangle.SetParamNames("\"", "\"", 1, wl),
			strmangle.WhereClause("\"", "\"", len(wl)+1, dashboardPrimaryKeyColumns),
		)
		cache.valueMapping, err = queries.BindMapping(dashboardType, dashboardMapping, append(wl, dashboardPrimaryKeyColumns...))
		if err != nil {
			return 0, err
		}
	}

	values := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, values)
	}
	var result sql.Result
	result, err = exec.ExecContext(ctx, cache.query, values...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update dashboard row")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by update for dashboard")
	}

	if !cached {
		dashboardUpdateCacheMut.Lock()
		dashboardUpdateCache[key] = cache
		dashboardUpdateCacheMut.Unlock()
	}

	return rowsAff, o.doAfterUpdateHooks(ctx, exec)
}

// UpdateAll updates all rows with the specified column values.
func (q dashboardQuery) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	queries.SetUpdate(q.Query, cols)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update all for dashboard")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to retrieve rows affected for dashboard")
	}

	return rowsAff, nil
}

// UpdateAll updates all rows with the specified column values, using an executor.
func (o DashboardSlice) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	ln := int64(len(o))
	if ln == 0 {
		return 0, nil
	}

	if len(cols) == 0 {
		return 0, errors.New("models: update all requires at least one column argument")
	}

	colNames := make([]string, len(cols))
	args := make([]interface{}, len(cols))

	i := 0
	for name, value := range cols {
		colNames[i] = name
		args[i] = value
		i++
	}

	// Append all of the primary key values for each column
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), dashboardPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := fmt.Sprintf("UPDATE \"dashboard\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, colNames),
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), len(colNames)+1, dashboardPrimaryKeyColumns, len(o)))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update all in dashboard slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to retrieve rows affected all in update all dashboard")
	}
	return rowsAff, nil
}

// Upsert attempts an insert using an executor, and does an update or ignore on conflict.
// See boil.Columns documentation for how to properly use updateColumns and insertColumns.
func (o *Dashboard) Upsert(ctx context.Context, exec boil.ContextExecutor, updateOnConflict bool, conflictColumns []string, updateColumns, insertColumns boil.Columns) error {
	if o == nil {
		return errors.New("models: no dashboard provided for upsert")
	}

	if err := o.doBeforeUpsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(dashboardColumnsWithDefault, o)

	// Build cache key in-line uglily - mysql vs psql problems
	buf := strmangle.GetBuffer()
	if updateOnConflict {
		buf.WriteByte('t')
	} else {
		buf.WriteByte('f')
	}
	buf.WriteByte('.')
	for _, c := range conflictColumns {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(updateColumns.Kind))
	for _, c := range updateColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(insertColumns.Kind))
	for _, c := range insertColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzDefaults {
		buf.WriteString(c)
	}
	key := buf.String()
	strmangle.PutBuffer(buf)

	dashboardUpsertCacheMut.RLock()
	cache, cached := dashboardUpsertCache[key]
	dashboardUpsertCacheMut.RUnlock()

	var err error

	if !cached {
		insert, ret := insertColumns.InsertColumnSet(
			dashboardAllColumns,
			dashboardColumnsWithDefault,
			dashboardColumnsWithoutDefault,
			nzDefaults,
		)

		update := updateColumns.UpdateColumnSet(
			dashboardAllColumns,
			dashboardPrimaryKeyColumns,
		)

		if updateOnConflict && len(update) == 0 {
			return errors.New("models: unable to upsert dashboard, could not build update column list")
		}

		conflict := conflictColumns
		if len(conflict) == 0 {
			conflict = make([]string, len(dashboardPrimaryKeyColumns))
			copy(conflict, dashboardPrimaryKeyColumns)
		}
		cache.query = buildUpsertQueryPostgres(dialect, "\"dashboard\"", updateOnConflict, ret, update, conflict, insert)

		cache.valueMapping, err = queries.BindMapping(dashboardType, dashboardMapping, insert)
		if err != nil {
			return err
		}
		if len(ret) != 0 {
			cache.retMapping, err = queries.BindMapping(dashboardType, dashboardMapping, ret)
			if err != nil {
				return err
			}
		}
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)
	var returns []interface{}
	if len(cache.retMapping) != 0 {
		returns = queries.PtrsFromMapping(value, cache.retMapping)
	}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}
	if len(cache.retMapping) != 0 {
		err = exec.QueryRowContext(ctx, cache.query, vals...).Scan(returns...)
		if errors.Is(err, sql.ErrNoRows) {
			err = nil // Postgres doesn't return anything when there's no update
		}
	} else {
		_, err = exec.ExecContext(ctx, cache.query, vals...)
	}
	if err != nil {
		return errors.Wrap(err, "models: unable to upsert dashboard")
	}

	if !cached {
		dashboardUpsertCacheMut.Lock()
		dashboardUpsertCache[key] = cache
		dashboardUpsertCacheMut.Unlock()
	}

	return o.doAfterUpsertHooks(ctx, exec)
}

// Delete deletes a single Dashboard record with an executor.
// Delete will match against the primary key column to find the record to delete.
func (o *Dashboard) Delete(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if o == nil {
		return 0, errors.New("models: no Dashboard provided for delete")
	}

	if err := o.doBeforeDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	args := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), dashboardPrimaryKeyMapping)
	sql := "DELETE FROM \"dashboard\" WHERE \"user_id\"=$1 AND \"proj_id\"=$2 AND \"dashboard_id\"=$3"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete from dashboard")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by delete for dashboard")
	}

	if err := o.doAfterDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	return rowsAff, nil
}

// DeleteAll deletes all matching rows.
func (q dashboardQuery) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if q.Query == nil {
		return 0, errors.New("models: no dashboardQuery provided for delete all")
	}

	queries.SetDelete(q.Query)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete all from dashboard")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by deleteall for dashboard")
	}

	return rowsAff, nil
}

// DeleteAll deletes all rows in the slice, using an executor.
func (o DashboardSlice) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if len(o) == 0 {
		return 0, nil
	}

	if len(dashboardBeforeDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doBeforeDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	var args []interface{}
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), dashboardPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "DELETE FROM \"dashboard\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, dashboardPrimaryKeyColumns, len(o))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete all from dashboard slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by deleteall for dashboard")
	}

	if len(dashboardAfterDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	return rowsAff, nil
}

// Reload refetches the object from the database
// using the primary keys with an executor.
func (o *Dashboard) Reload(ctx context.Context, exec boil.ContextExecutor) error {
	ret, err := FindDashboard(ctx, exec, o.UserID, o.ProjID, o.DashboardID)
	if err != nil {
		return err
	}

	*o = *ret
	return nil
}

// ReloadAll refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *DashboardSlice) ReloadAll(ctx context.Context, exec boil.ContextExecutor) error {
	if o == nil || len(*o) == 0 {
		return nil
	}

	slice := DashboardSlice{}
	var args []interface{}
	for _, obj := range *o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), dashboardPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "SELECT \"dashboard\".* FROM \"dashboard\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, dashboardPrimaryKeyColumns, len(*o))

	q := queries.Raw(sql, args...)

	err := q.Bind(ctx, exec, &slice)
	if err != nil {
		return errors.Wrap(err, "models: unable to reload all in DashboardSlice")
	}

	*o = slice

	return nil
}

// DashboardExists checks if the Dashboard row exists.
func DashboardExists(ctx context.Context, exec boil.ContextExecutor, userID string, projID string, dashboardID int) (bool, error) {
	var exists bool
	sql := "select exists(select 1 from \"dashboard\" where \"user_id\"=$1 AND \"proj_id\"=$2 AND \"dashboard_id\"=$3 limit 1)"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, userID, projID, dashboardID)
	}
	row := exec.QueryRowContext(ctx, sql, userID, projID, dashboardID)

	err := row.Scan(&exists)
	if err != nil {
		return false, errors.Wrap(err, "models: unable to check if dashboard exists")
	}

	return exists, nil
}
