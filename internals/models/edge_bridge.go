// Code generated by SQLBoiler 4.13.0 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package models

import (
	"context"
	"database/sql"
	"fmt"
	"reflect"
	"strconv"
	"strings"
	"sync"
	"time"

	"github.com/friendsofgo/errors"
	"github.com/volatiletech/null/v8"
	"github.com/volatiletech/sqlboiler/v4/boil"
	"github.com/volatiletech/sqlboiler/v4/queries"
	"github.com/volatiletech/sqlboiler/v4/queries/qm"
	"github.com/volatiletech/sqlboiler/v4/queries/qmhelper"
	"github.com/volatiletech/strmangle"
)

// EdgeBridge is an object representing the database table.
type EdgeBridge struct {
	BridgeID    int         `boil:"bridge_id" json:"bridge_id" toml:"bridge_id" yaml:"bridge_id"`
	NodeID      null.String `boil:"node_id" json:"node_id,omitempty" toml:"node_id" yaml:"node_id,omitempty"`
	AssetID     null.Int    `boil:"asset_id" json:"asset_id,omitempty" toml:"asset_id" yaml:"asset_id,omitempty"`
	Class       string      `boil:"class" json:"class" toml:"class" yaml:"class"`
	Description null.String `boil:"description" json:"description,omitempty" toml:"description" yaml:"description,omitempty"`
	Enable      bool        `boil:"enable" json:"enable" toml:"enable" yaml:"enable"`
	Config      null.JSON   `boil:"config" json:"config,omitempty" toml:"config" yaml:"config,omitempty"`

	R *edgeBridgeR `boil:"-" json:"-" toml:"-" yaml:"-"`
	L edgeBridgeL  `boil:"-" json:"-" toml:"-" yaml:"-"`
}

var EdgeBridgeColumns = struct {
	BridgeID    string
	NodeID      string
	AssetID     string
	Class       string
	Description string
	Enable      string
	Config      string
}{
	BridgeID:    "bridge_id",
	NodeID:      "node_id",
	AssetID:     "asset_id",
	Class:       "class",
	Description: "description",
	Enable:      "enable",
	Config:      "config",
}

var EdgeBridgeTableColumns = struct {
	BridgeID    string
	NodeID      string
	AssetID     string
	Class       string
	Description string
	Enable      string
	Config      string
}{
	BridgeID:    "edge_bridge.bridge_id",
	NodeID:      "edge_bridge.node_id",
	AssetID:     "edge_bridge.asset_id",
	Class:       "edge_bridge.class",
	Description: "edge_bridge.description",
	Enable:      "edge_bridge.enable",
	Config:      "edge_bridge.config",
}

// Generated where

var EdgeBridgeWhere = struct {
	BridgeID    whereHelperint
	NodeID      whereHelpernull_String
	AssetID     whereHelpernull_Int
	Class       whereHelperstring
	Description whereHelpernull_String
	Enable      whereHelperbool
	Config      whereHelpernull_JSON
}{
	BridgeID:    whereHelperint{field: "\"edge_bridge\".\"bridge_id\""},
	NodeID:      whereHelpernull_String{field: "\"edge_bridge\".\"node_id\""},
	AssetID:     whereHelpernull_Int{field: "\"edge_bridge\".\"asset_id\""},
	Class:       whereHelperstring{field: "\"edge_bridge\".\"class\""},
	Description: whereHelpernull_String{field: "\"edge_bridge\".\"description\""},
	Enable:      whereHelperbool{field: "\"edge_bridge\".\"enable\""},
	Config:      whereHelpernull_JSON{field: "\"edge_bridge\".\"config\""},
}

// EdgeBridgeRels is where relationship names are stored.
var EdgeBridgeRels = struct {
}{}

// edgeBridgeR is where relationships are stored.
type edgeBridgeR struct {
}

// NewStruct creates a new relationship struct
func (*edgeBridgeR) NewStruct() *edgeBridgeR {
	return &edgeBridgeR{}
}

// edgeBridgeL is where Load methods for each relationship are stored.
type edgeBridgeL struct{}

var (
	edgeBridgeAllColumns            = []string{"bridge_id", "node_id", "asset_id", "class", "description", "enable", "config"}
	edgeBridgeColumnsWithoutDefault = []string{"bridge_id", "class"}
	edgeBridgeColumnsWithDefault    = []string{"node_id", "asset_id", "description", "enable", "config"}
	edgeBridgePrimaryKeyColumns     = []string{"bridge_id"}
	edgeBridgeGeneratedColumns      = []string{}
)

type (
	// EdgeBridgeSlice is an alias for a slice of pointers to EdgeBridge.
	// This should almost always be used instead of []EdgeBridge.
	EdgeBridgeSlice []*EdgeBridge
	// EdgeBridgeHook is the signature for custom EdgeBridge hook methods
	EdgeBridgeHook func(context.Context, boil.ContextExecutor, *EdgeBridge) error

	edgeBridgeQuery struct {
		*queries.Query
	}
)

// Cache for insert, update and upsert
var (
	edgeBridgeType                 = reflect.TypeOf(&EdgeBridge{})
	edgeBridgeMapping              = queries.MakeStructMapping(edgeBridgeType)
	edgeBridgePrimaryKeyMapping, _ = queries.BindMapping(edgeBridgeType, edgeBridgeMapping, edgeBridgePrimaryKeyColumns)
	edgeBridgeInsertCacheMut       sync.RWMutex
	edgeBridgeInsertCache          = make(map[string]insertCache)
	edgeBridgeUpdateCacheMut       sync.RWMutex
	edgeBridgeUpdateCache          = make(map[string]updateCache)
	edgeBridgeUpsertCacheMut       sync.RWMutex
	edgeBridgeUpsertCache          = make(map[string]insertCache)
)

var (
	// Force time package dependency for automated UpdatedAt/CreatedAt.
	_ = time.Second
	// Force qmhelper dependency for where clause generation (which doesn't
	// always happen)
	_ = qmhelper.Where
)

var edgeBridgeAfterSelectHooks []EdgeBridgeHook

var edgeBridgeBeforeInsertHooks []EdgeBridgeHook
var edgeBridgeAfterInsertHooks []EdgeBridgeHook

var edgeBridgeBeforeUpdateHooks []EdgeBridgeHook
var edgeBridgeAfterUpdateHooks []EdgeBridgeHook

var edgeBridgeBeforeDeleteHooks []EdgeBridgeHook
var edgeBridgeAfterDeleteHooks []EdgeBridgeHook

var edgeBridgeBeforeUpsertHooks []EdgeBridgeHook
var edgeBridgeAfterUpsertHooks []EdgeBridgeHook

// doAfterSelectHooks executes all "after Select" hooks.
func (o *EdgeBridge) doAfterSelectHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range edgeBridgeAfterSelectHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeInsertHooks executes all "before insert" hooks.
func (o *EdgeBridge) doBeforeInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range edgeBridgeBeforeInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterInsertHooks executes all "after Insert" hooks.
func (o *EdgeBridge) doAfterInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range edgeBridgeAfterInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpdateHooks executes all "before Update" hooks.
func (o *EdgeBridge) doBeforeUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range edgeBridgeBeforeUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpdateHooks executes all "after Update" hooks.
func (o *EdgeBridge) doAfterUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range edgeBridgeAfterUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeDeleteHooks executes all "before Delete" hooks.
func (o *EdgeBridge) doBeforeDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range edgeBridgeBeforeDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterDeleteHooks executes all "after Delete" hooks.
func (o *EdgeBridge) doAfterDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range edgeBridgeAfterDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpsertHooks executes all "before Upsert" hooks.
func (o *EdgeBridge) doBeforeUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range edgeBridgeBeforeUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpsertHooks executes all "after Upsert" hooks.
func (o *EdgeBridge) doAfterUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range edgeBridgeAfterUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// AddEdgeBridgeHook registers your hook function for all future operations.
func AddEdgeBridgeHook(hookPoint boil.HookPoint, edgeBridgeHook EdgeBridgeHook) {
	switch hookPoint {
	case boil.AfterSelectHook:
		edgeBridgeAfterSelectHooks = append(edgeBridgeAfterSelectHooks, edgeBridgeHook)
	case boil.BeforeInsertHook:
		edgeBridgeBeforeInsertHooks = append(edgeBridgeBeforeInsertHooks, edgeBridgeHook)
	case boil.AfterInsertHook:
		edgeBridgeAfterInsertHooks = append(edgeBridgeAfterInsertHooks, edgeBridgeHook)
	case boil.BeforeUpdateHook:
		edgeBridgeBeforeUpdateHooks = append(edgeBridgeBeforeUpdateHooks, edgeBridgeHook)
	case boil.AfterUpdateHook:
		edgeBridgeAfterUpdateHooks = append(edgeBridgeAfterUpdateHooks, edgeBridgeHook)
	case boil.BeforeDeleteHook:
		edgeBridgeBeforeDeleteHooks = append(edgeBridgeBeforeDeleteHooks, edgeBridgeHook)
	case boil.AfterDeleteHook:
		edgeBridgeAfterDeleteHooks = append(edgeBridgeAfterDeleteHooks, edgeBridgeHook)
	case boil.BeforeUpsertHook:
		edgeBridgeBeforeUpsertHooks = append(edgeBridgeBeforeUpsertHooks, edgeBridgeHook)
	case boil.AfterUpsertHook:
		edgeBridgeAfterUpsertHooks = append(edgeBridgeAfterUpsertHooks, edgeBridgeHook)
	}
}

// One returns a single edgeBridge record from the query.
func (q edgeBridgeQuery) One(ctx context.Context, exec boil.ContextExecutor) (*EdgeBridge, error) {
	o := &EdgeBridge{}

	queries.SetLimit(q.Query, 1)

	err := q.Bind(ctx, exec, o)
	if err != nil {
		if errors.Is(err, sql.ErrNoRows) {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: failed to execute a one query for edge_bridge")
	}

	if err := o.doAfterSelectHooks(ctx, exec); err != nil {
		return o, err
	}

	return o, nil
}

// All returns all EdgeBridge records from the query.
func (q edgeBridgeQuery) All(ctx context.Context, exec boil.ContextExecutor) (EdgeBridgeSlice, error) {
	var o []*EdgeBridge

	err := q.Bind(ctx, exec, &o)
	if err != nil {
		return nil, errors.Wrap(err, "models: failed to assign all query results to EdgeBridge slice")
	}

	if len(edgeBridgeAfterSelectHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterSelectHooks(ctx, exec); err != nil {
				return o, err
			}
		}
	}

	return o, nil
}

// Count returns the count of all EdgeBridge records in the query.
func (q edgeBridgeQuery) Count(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to count edge_bridge rows")
	}

	return count, nil
}

// Exists checks if the row exists in the table.
func (q edgeBridgeQuery) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)
	queries.SetLimit(q.Query, 1)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return false, errors.Wrap(err, "models: failed to check if edge_bridge exists")
	}

	return count > 0, nil
}

// EdgeBridges retrieves all the records using an executor.
func EdgeBridges(mods ...qm.QueryMod) edgeBridgeQuery {
	mods = append(mods, qm.From("\"edge_bridge\""))
	q := NewQuery(mods...)
	if len(queries.GetSelect(q)) == 0 {
		queries.SetSelect(q, []string{"\"edge_bridge\".*"})
	}

	return edgeBridgeQuery{q}
}

// FindEdgeBridge retrieves a single record by ID with an executor.
// If selectCols is empty Find will return all columns.
func FindEdgeBridge(ctx context.Context, exec boil.ContextExecutor, bridgeID int, selectCols ...string) (*EdgeBridge, error) {
	edgeBridgeObj := &EdgeBridge{}

	sel := "*"
	if len(selectCols) > 0 {
		sel = strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, selectCols), ",")
	}
	query := fmt.Sprintf(
		"select %s from \"edge_bridge\" where \"bridge_id\"=$1", sel,
	)

	q := queries.Raw(query, bridgeID)

	err := q.Bind(ctx, exec, edgeBridgeObj)
	if err != nil {
		if errors.Is(err, sql.ErrNoRows) {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: unable to select from edge_bridge")
	}

	if err = edgeBridgeObj.doAfterSelectHooks(ctx, exec); err != nil {
		return edgeBridgeObj, err
	}

	return edgeBridgeObj, nil
}

// Insert a single record using an executor.
// See boil.Columns.InsertColumnSet documentation to understand column list inference for inserts.
func (o *EdgeBridge) Insert(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) error {
	if o == nil {
		return errors.New("models: no edge_bridge provided for insertion")
	}

	var err error

	if err := o.doBeforeInsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(edgeBridgeColumnsWithDefault, o)

	key := makeCacheKey(columns, nzDefaults)
	edgeBridgeInsertCacheMut.RLock()
	cache, cached := edgeBridgeInsertCache[key]
	edgeBridgeInsertCacheMut.RUnlock()

	if !cached {
		wl, returnColumns := columns.InsertColumnSet(
			edgeBridgeAllColumns,
			edgeBridgeColumnsWithDefault,
			edgeBridgeColumnsWithoutDefault,
			nzDefaults,
		)

		cache.valueMapping, err = queries.BindMapping(edgeBridgeType, edgeBridgeMapping, wl)
		if err != nil {
			return err
		}
		cache.retMapping, err = queries.BindMapping(edgeBridgeType, edgeBridgeMapping, returnColumns)
		if err != nil {
			return err
		}
		if len(wl) != 0 {
			cache.query = fmt.Sprintf("INSERT INTO \"edge_bridge\" (\"%s\") %%sVALUES (%s)%%s", strings.Join(wl, "\",\""), strmangle.Placeholders(dialect.UseIndexPlaceholders, len(wl), 1, 1))
		} else {
			cache.query = "INSERT INTO \"edge_bridge\" %sDEFAULT VALUES%s"
		}

		var queryOutput, queryReturning string

		if len(cache.retMapping) != 0 {
			queryReturning = fmt.Sprintf(" RETURNING \"%s\"", strings.Join(returnColumns, "\",\""))
		}

		cache.query = fmt.Sprintf(cache.query, queryOutput, queryReturning)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}

	if len(cache.retMapping) != 0 {
		err = exec.QueryRowContext(ctx, cache.query, vals...).Scan(queries.PtrsFromMapping(value, cache.retMapping)...)
	} else {
		_, err = exec.ExecContext(ctx, cache.query, vals...)
	}

	if err != nil {
		return errors.Wrap(err, "models: unable to insert into edge_bridge")
	}

	if !cached {
		edgeBridgeInsertCacheMut.Lock()
		edgeBridgeInsertCache[key] = cache
		edgeBridgeInsertCacheMut.Unlock()
	}

	return o.doAfterInsertHooks(ctx, exec)
}

// Update uses an executor to update the EdgeBridge.
// See boil.Columns.UpdateColumnSet documentation to understand column list inference for updates.
// Update does not automatically update the record in case of default values. Use .Reload() to refresh the records.
func (o *EdgeBridge) Update(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) (int64, error) {
	var err error
	if err = o.doBeforeUpdateHooks(ctx, exec); err != nil {
		return 0, err
	}
	key := makeCacheKey(columns, nil)
	edgeBridgeUpdateCacheMut.RLock()
	cache, cached := edgeBridgeUpdateCache[key]
	edgeBridgeUpdateCacheMut.RUnlock()

	if !cached {
		wl := columns.UpdateColumnSet(
			edgeBridgeAllColumns,
			edgeBridgePrimaryKeyColumns,
		)

		if !columns.IsWhitelist() {
			wl = strmangle.SetComplement(wl, []string{"created_at"})
		}
		if len(wl) == 0 {
			return 0, errors.New("models: unable to update edge_bridge, could not build whitelist")
		}

		cache.query = fmt.Sprintf("UPDATE \"edge_bridge\" SET %s WHERE %s",
			strmangle.SetParamNames("\"", "\"", 1, wl),
			strmangle.WhereClause("\"", "\"", len(wl)+1, edgeBridgePrimaryKeyColumns),
		)
		cache.valueMapping, err = queries.BindMapping(edgeBridgeType, edgeBridgeMapping, append(wl, edgeBridgePrimaryKeyColumns...))
		if err != nil {
			return 0, err
		}
	}

	values := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, values)
	}
	var result sql.Result
	result, err = exec.ExecContext(ctx, cache.query, values...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update edge_bridge row")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by update for edge_bridge")
	}

	if !cached {
		edgeBridgeUpdateCacheMut.Lock()
		edgeBridgeUpdateCache[key] = cache
		edgeBridgeUpdateCacheMut.Unlock()
	}

	return rowsAff, o.doAfterUpdateHooks(ctx, exec)
}

// UpdateAll updates all rows with the specified column values.
func (q edgeBridgeQuery) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	queries.SetUpdate(q.Query, cols)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update all for edge_bridge")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to retrieve rows affected for edge_bridge")
	}

	return rowsAff, nil
}

// UpdateAll updates all rows with the specified column values, using an executor.
func (o EdgeBridgeSlice) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	ln := int64(len(o))
	if ln == 0 {
		return 0, nil
	}

	if len(cols) == 0 {
		return 0, errors.New("models: update all requires at least one column argument")
	}

	colNames := make([]string, len(cols))
	args := make([]interface{}, len(cols))

	i := 0
	for name, value := range cols {
		colNames[i] = name
		args[i] = value
		i++
	}

	// Append all of the primary key values for each column
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), edgeBridgePrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := fmt.Sprintf("UPDATE \"edge_bridge\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, colNames),
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), len(colNames)+1, edgeBridgePrimaryKeyColumns, len(o)))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update all in edgeBridge slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to retrieve rows affected all in update all edgeBridge")
	}
	return rowsAff, nil
}

// Upsert attempts an insert using an executor, and does an update or ignore on conflict.
// See boil.Columns documentation for how to properly use updateColumns and insertColumns.
func (o *EdgeBridge) Upsert(ctx context.Context, exec boil.ContextExecutor, updateOnConflict bool, conflictColumns []string, updateColumns, insertColumns boil.Columns) error {
	if o == nil {
		return errors.New("models: no edge_bridge provided for upsert")
	}

	if err := o.doBeforeUpsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(edgeBridgeColumnsWithDefault, o)

	// Build cache key in-line uglily - mysql vs psql problems
	buf := strmangle.GetBuffer()
	if updateOnConflict {
		buf.WriteByte('t')
	} else {
		buf.WriteByte('f')
	}
	buf.WriteByte('.')
	for _, c := range conflictColumns {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(updateColumns.Kind))
	for _, c := range updateColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(insertColumns.Kind))
	for _, c := range insertColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzDefaults {
		buf.WriteString(c)
	}
	key := buf.String()
	strmangle.PutBuffer(buf)

	edgeBridgeUpsertCacheMut.RLock()
	cache, cached := edgeBridgeUpsertCache[key]
	edgeBridgeUpsertCacheMut.RUnlock()

	var err error

	if !cached {
		insert, ret := insertColumns.InsertColumnSet(
			edgeBridgeAllColumns,
			edgeBridgeColumnsWithDefault,
			edgeBridgeColumnsWithoutDefault,
			nzDefaults,
		)

		update := updateColumns.UpdateColumnSet(
			edgeBridgeAllColumns,
			edgeBridgePrimaryKeyColumns,
		)

		if updateOnConflict && len(update) == 0 {
			return errors.New("models: unable to upsert edge_bridge, could not build update column list")
		}

		conflict := conflictColumns
		if len(conflict) == 0 {
			conflict = make([]string, len(edgeBridgePrimaryKeyColumns))
			copy(conflict, edgeBridgePrimaryKeyColumns)
		}
		cache.query = buildUpsertQueryPostgres(dialect, "\"edge_bridge\"", updateOnConflict, ret, update, conflict, insert)

		cache.valueMapping, err = queries.BindMapping(edgeBridgeType, edgeBridgeMapping, insert)
		if err != nil {
			return err
		}
		if len(ret) != 0 {
			cache.retMapping, err = queries.BindMapping(edgeBridgeType, edgeBridgeMapping, ret)
			if err != nil {
				return err
			}
		}
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)
	var returns []interface{}
	if len(cache.retMapping) != 0 {
		returns = queries.PtrsFromMapping(value, cache.retMapping)
	}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}
	if len(cache.retMapping) != 0 {
		err = exec.QueryRowContext(ctx, cache.query, vals...).Scan(returns...)
		if errors.Is(err, sql.ErrNoRows) {
			err = nil // Postgres doesn't return anything when there's no update
		}
	} else {
		_, err = exec.ExecContext(ctx, cache.query, vals...)
	}
	if err != nil {
		return errors.Wrap(err, "models: unable to upsert edge_bridge")
	}

	if !cached {
		edgeBridgeUpsertCacheMut.Lock()
		edgeBridgeUpsertCache[key] = cache
		edgeBridgeUpsertCacheMut.Unlock()
	}

	return o.doAfterUpsertHooks(ctx, exec)
}

// Delete deletes a single EdgeBridge record with an executor.
// Delete will match against the primary key column to find the record to delete.
func (o *EdgeBridge) Delete(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if o == nil {
		return 0, errors.New("models: no EdgeBridge provided for delete")
	}

	if err := o.doBeforeDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	args := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), edgeBridgePrimaryKeyMapping)
	sql := "DELETE FROM \"edge_bridge\" WHERE \"bridge_id\"=$1"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete from edge_bridge")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by delete for edge_bridge")
	}

	if err := o.doAfterDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	return rowsAff, nil
}

// DeleteAll deletes all matching rows.
func (q edgeBridgeQuery) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if q.Query == nil {
		return 0, errors.New("models: no edgeBridgeQuery provided for delete all")
	}

	queries.SetDelete(q.Query)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete all from edge_bridge")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by deleteall for edge_bridge")
	}

	return rowsAff, nil
}

// DeleteAll deletes all rows in the slice, using an executor.
func (o EdgeBridgeSlice) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if len(o) == 0 {
		return 0, nil
	}

	if len(edgeBridgeBeforeDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doBeforeDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	var args []interface{}
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), edgeBridgePrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "DELETE FROM \"edge_bridge\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, edgeBridgePrimaryKeyColumns, len(o))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete all from edgeBridge slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by deleteall for edge_bridge")
	}

	if len(edgeBridgeAfterDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	return rowsAff, nil
}

// Reload refetches the object from the database
// using the primary keys with an executor.
func (o *EdgeBridge) Reload(ctx context.Context, exec boil.ContextExecutor) error {
	ret, err := FindEdgeBridge(ctx, exec, o.BridgeID)
	if err != nil {
		return err
	}

	*o = *ret
	return nil
}

// ReloadAll refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *EdgeBridgeSlice) ReloadAll(ctx context.Context, exec boil.ContextExecutor) error {
	if o == nil || len(*o) == 0 {
		return nil
	}

	slice := EdgeBridgeSlice{}
	var args []interface{}
	for _, obj := range *o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), edgeBridgePrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "SELECT \"edge_bridge\".* FROM \"edge_bridge\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, edgeBridgePrimaryKeyColumns, len(*o))

	q := queries.Raw(sql, args...)

	err := q.Bind(ctx, exec, &slice)
	if err != nil {
		return errors.Wrap(err, "models: unable to reload all in EdgeBridgeSlice")
	}

	*o = slice

	return nil
}

// EdgeBridgeExists checks if the EdgeBridge row exists.
func EdgeBridgeExists(ctx context.Context, exec boil.ContextExecutor, bridgeID int) (bool, error) {
	var exists bool
	sql := "select exists(select 1 from \"edge_bridge\" where \"bridge_id\"=$1 limit 1)"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, bridgeID)
	}
	row := exec.QueryRowContext(ctx, sql, bridgeID)

	err := row.Scan(&exists)
	if err != nil {
		return false, errors.Wrap(err, "models: unable to check if edge_bridge exists")
	}

	return exists, nil
}
