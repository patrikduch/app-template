// Code generated by SQLBoiler 4.13.0 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package models

import (
	"context"
	"database/sql"
	"fmt"
	"reflect"
	"strconv"
	"strings"
	"sync"
	"time"

	"github.com/friendsofgo/errors"
	"github.com/volatiletech/null/v8"
	"github.com/volatiletech/sqlboiler/v4/boil"
	"github.com/volatiletech/sqlboiler/v4/queries"
	"github.com/volatiletech/sqlboiler/v4/queries/qm"
	"github.com/volatiletech/sqlboiler/v4/queries/qmhelper"
	"github.com/volatiletech/strmangle"
)

// ACLKeyAccess is an object representing the database table.
type ACLKeyAccess struct {
	ID          int         `boil:"id" json:"id" toml:"id" yaml:"id"`
	SecurityID  null.Int    `boil:"security_id" json:"security_id,omitempty" toml:"security_id" yaml:"security_id,omitempty"`
	ObjectID    null.Int    `boil:"object_id" json:"object_id,omitempty" toml:"object_id" yaml:"object_id,omitempty"`
	Mask        null.Int    `boil:"mask" json:"mask,omitempty" toml:"mask" yaml:"mask,omitempty"`
	Displayname null.String `boil:"displayname" json:"displayname,omitempty" toml:"displayname" yaml:"displayname,omitempty"`
	Principal   null.Bool   `boil:"principal" json:"principal,omitempty" toml:"principal" yaml:"principal,omitempty"`
	Path        null.String `boil:"path" json:"path,omitempty" toml:"path" yaml:"path,omitempty"`
	Public      null.Bool   `boil:"public" json:"public,omitempty" toml:"public" yaml:"public,omitempty"`
	KeyID       null.Int    `boil:"key_id" json:"key_id,omitempty" toml:"key_id" yaml:"key_id,omitempty"`

	R *aclKeyAccessR `boil:"-" json:"-" toml:"-" yaml:"-"`
	L aclKeyAccessL  `boil:"-" json:"-" toml:"-" yaml:"-"`
}

var ACLKeyAccessColumns = struct {
	ID          string
	SecurityID  string
	ObjectID    string
	Mask        string
	Displayname string
	Principal   string
	Path        string
	Public      string
	KeyID       string
}{
	ID:          "id",
	SecurityID:  "security_id",
	ObjectID:    "object_id",
	Mask:        "mask",
	Displayname: "displayname",
	Principal:   "principal",
	Path:        "path",
	Public:      "public",
	KeyID:       "key_id",
}

var ACLKeyAccessTableColumns = struct {
	ID          string
	SecurityID  string
	ObjectID    string
	Mask        string
	Displayname string
	Principal   string
	Path        string
	Public      string
	KeyID       string
}{
	ID:          "acl_key_access.id",
	SecurityID:  "acl_key_access.security_id",
	ObjectID:    "acl_key_access.object_id",
	Mask:        "acl_key_access.mask",
	Displayname: "acl_key_access.displayname",
	Principal:   "acl_key_access.principal",
	Path:        "acl_key_access.path",
	Public:      "acl_key_access.public",
	KeyID:       "acl_key_access.key_id",
}

// Generated where

type whereHelperint struct{ field string }

func (w whereHelperint) EQ(x int) qm.QueryMod  { return qmhelper.Where(w.field, qmhelper.EQ, x) }
func (w whereHelperint) NEQ(x int) qm.QueryMod { return qmhelper.Where(w.field, qmhelper.NEQ, x) }
func (w whereHelperint) LT(x int) qm.QueryMod  { return qmhelper.Where(w.field, qmhelper.LT, x) }
func (w whereHelperint) LTE(x int) qm.QueryMod { return qmhelper.Where(w.field, qmhelper.LTE, x) }
func (w whereHelperint) GT(x int) qm.QueryMod  { return qmhelper.Where(w.field, qmhelper.GT, x) }
func (w whereHelperint) GTE(x int) qm.QueryMod { return qmhelper.Where(w.field, qmhelper.GTE, x) }
func (w whereHelperint) IN(slice []int) qm.QueryMod {
	values := make([]interface{}, 0, len(slice))
	for _, value := range slice {
		values = append(values, value)
	}
	return qm.WhereIn(fmt.Sprintf("%s IN ?", w.field), values...)
}
func (w whereHelperint) NIN(slice []int) qm.QueryMod {
	values := make([]interface{}, 0, len(slice))
	for _, value := range slice {
		values = append(values, value)
	}
	return qm.WhereNotIn(fmt.Sprintf("%s NOT IN ?", w.field), values...)
}

type whereHelpernull_Int struct{ field string }

func (w whereHelpernull_Int) EQ(x null.Int) qm.QueryMod {
	return qmhelper.WhereNullEQ(w.field, false, x)
}
func (w whereHelpernull_Int) NEQ(x null.Int) qm.QueryMod {
	return qmhelper.WhereNullEQ(w.field, true, x)
}
func (w whereHelpernull_Int) LT(x null.Int) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.LT, x)
}
func (w whereHelpernull_Int) LTE(x null.Int) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.LTE, x)
}
func (w whereHelpernull_Int) GT(x null.Int) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.GT, x)
}
func (w whereHelpernull_Int) GTE(x null.Int) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.GTE, x)
}
func (w whereHelpernull_Int) IN(slice []int) qm.QueryMod {
	values := make([]interface{}, 0, len(slice))
	for _, value := range slice {
		values = append(values, value)
	}
	return qm.WhereIn(fmt.Sprintf("%s IN ?", w.field), values...)
}
func (w whereHelpernull_Int) NIN(slice []int) qm.QueryMod {
	values := make([]interface{}, 0, len(slice))
	for _, value := range slice {
		values = append(values, value)
	}
	return qm.WhereNotIn(fmt.Sprintf("%s NOT IN ?", w.field), values...)
}

func (w whereHelpernull_Int) IsNull() qm.QueryMod    { return qmhelper.WhereIsNull(w.field) }
func (w whereHelpernull_Int) IsNotNull() qm.QueryMod { return qmhelper.WhereIsNotNull(w.field) }

type whereHelpernull_String struct{ field string }

func (w whereHelpernull_String) EQ(x null.String) qm.QueryMod {
	return qmhelper.WhereNullEQ(w.field, false, x)
}
func (w whereHelpernull_String) NEQ(x null.String) qm.QueryMod {
	return qmhelper.WhereNullEQ(w.field, true, x)
}
func (w whereHelpernull_String) LT(x null.String) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.LT, x)
}
func (w whereHelpernull_String) LTE(x null.String) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.LTE, x)
}
func (w whereHelpernull_String) GT(x null.String) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.GT, x)
}
func (w whereHelpernull_String) GTE(x null.String) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.GTE, x)
}
func (w whereHelpernull_String) IN(slice []string) qm.QueryMod {
	values := make([]interface{}, 0, len(slice))
	for _, value := range slice {
		values = append(values, value)
	}
	return qm.WhereIn(fmt.Sprintf("%s IN ?", w.field), values...)
}
func (w whereHelpernull_String) NIN(slice []string) qm.QueryMod {
	values := make([]interface{}, 0, len(slice))
	for _, value := range slice {
		values = append(values, value)
	}
	return qm.WhereNotIn(fmt.Sprintf("%s NOT IN ?", w.field), values...)
}

func (w whereHelpernull_String) IsNull() qm.QueryMod    { return qmhelper.WhereIsNull(w.field) }
func (w whereHelpernull_String) IsNotNull() qm.QueryMod { return qmhelper.WhereIsNotNull(w.field) }

type whereHelpernull_Bool struct{ field string }

func (w whereHelpernull_Bool) EQ(x null.Bool) qm.QueryMod {
	return qmhelper.WhereNullEQ(w.field, false, x)
}
func (w whereHelpernull_Bool) NEQ(x null.Bool) qm.QueryMod {
	return qmhelper.WhereNullEQ(w.field, true, x)
}
func (w whereHelpernull_Bool) LT(x null.Bool) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.LT, x)
}
func (w whereHelpernull_Bool) LTE(x null.Bool) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.LTE, x)
}
func (w whereHelpernull_Bool) GT(x null.Bool) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.GT, x)
}
func (w whereHelpernull_Bool) GTE(x null.Bool) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.GTE, x)
}

func (w whereHelpernull_Bool) IsNull() qm.QueryMod    { return qmhelper.WhereIsNull(w.field) }
func (w whereHelpernull_Bool) IsNotNull() qm.QueryMod { return qmhelper.WhereIsNotNull(w.field) }

var ACLKeyAccessWhere = struct {
	ID          whereHelperint
	SecurityID  whereHelpernull_Int
	ObjectID    whereHelpernull_Int
	Mask        whereHelpernull_Int
	Displayname whereHelpernull_String
	Principal   whereHelpernull_Bool
	Path        whereHelpernull_String
	Public      whereHelpernull_Bool
	KeyID       whereHelpernull_Int
}{
	ID:          whereHelperint{field: "\"acl_key_access\".\"id\""},
	SecurityID:  whereHelpernull_Int{field: "\"acl_key_access\".\"security_id\""},
	ObjectID:    whereHelpernull_Int{field: "\"acl_key_access\".\"object_id\""},
	Mask:        whereHelpernull_Int{field: "\"acl_key_access\".\"mask\""},
	Displayname: whereHelpernull_String{field: "\"acl_key_access\".\"displayname\""},
	Principal:   whereHelpernull_Bool{field: "\"acl_key_access\".\"principal\""},
	Path:        whereHelpernull_String{field: "\"acl_key_access\".\"path\""},
	Public:      whereHelpernull_Bool{field: "\"acl_key_access\".\"public\""},
	KeyID:       whereHelpernull_Int{field: "\"acl_key_access\".\"key_id\""},
}

// ACLKeyAccessRels is where relationship names are stored.
var ACLKeyAccessRels = struct {
}{}

// aclKeyAccessR is where relationships are stored.
type aclKeyAccessR struct {
}

// NewStruct creates a new relationship struct
func (*aclKeyAccessR) NewStruct() *aclKeyAccessR {
	return &aclKeyAccessR{}
}

// aclKeyAccessL is where Load methods for each relationship are stored.
type aclKeyAccessL struct{}

var (
	aclKeyAccessAllColumns            = []string{"id", "security_id", "object_id", "mask", "displayname", "principal", "path", "public", "key_id"}
	aclKeyAccessColumnsWithoutDefault = []string{}
	aclKeyAccessColumnsWithDefault    = []string{"id", "security_id", "object_id", "mask", "displayname", "principal", "path", "public", "key_id"}
	aclKeyAccessPrimaryKeyColumns     = []string{"id"}
	aclKeyAccessGeneratedColumns      = []string{}
)

type (
	// ACLKeyAccessSlice is an alias for a slice of pointers to ACLKeyAccess.
	// This should almost always be used instead of []ACLKeyAccess.
	ACLKeyAccessSlice []*ACLKeyAccess
	// ACLKeyAccessHook is the signature for custom ACLKeyAccess hook methods
	ACLKeyAccessHook func(context.Context, boil.ContextExecutor, *ACLKeyAccess) error

	aclKeyAccessQuery struct {
		*queries.Query
	}
)

// Cache for insert, update and upsert
var (
	aclKeyAccessType                 = reflect.TypeOf(&ACLKeyAccess{})
	aclKeyAccessMapping              = queries.MakeStructMapping(aclKeyAccessType)
	aclKeyAccessPrimaryKeyMapping, _ = queries.BindMapping(aclKeyAccessType, aclKeyAccessMapping, aclKeyAccessPrimaryKeyColumns)
	aclKeyAccessInsertCacheMut       sync.RWMutex
	aclKeyAccessInsertCache          = make(map[string]insertCache)
	aclKeyAccessUpdateCacheMut       sync.RWMutex
	aclKeyAccessUpdateCache          = make(map[string]updateCache)
	aclKeyAccessUpsertCacheMut       sync.RWMutex
	aclKeyAccessUpsertCache          = make(map[string]insertCache)
)

var (
	// Force time package dependency for automated UpdatedAt/CreatedAt.
	_ = time.Second
	// Force qmhelper dependency for where clause generation (which doesn't
	// always happen)
	_ = qmhelper.Where
)

var aclKeyAccessAfterSelectHooks []ACLKeyAccessHook

var aclKeyAccessBeforeInsertHooks []ACLKeyAccessHook
var aclKeyAccessAfterInsertHooks []ACLKeyAccessHook

var aclKeyAccessBeforeUpdateHooks []ACLKeyAccessHook
var aclKeyAccessAfterUpdateHooks []ACLKeyAccessHook

var aclKeyAccessBeforeDeleteHooks []ACLKeyAccessHook
var aclKeyAccessAfterDeleteHooks []ACLKeyAccessHook

var aclKeyAccessBeforeUpsertHooks []ACLKeyAccessHook
var aclKeyAccessAfterUpsertHooks []ACLKeyAccessHook

// doAfterSelectHooks executes all "after Select" hooks.
func (o *ACLKeyAccess) doAfterSelectHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range aclKeyAccessAfterSelectHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeInsertHooks executes all "before insert" hooks.
func (o *ACLKeyAccess) doBeforeInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range aclKeyAccessBeforeInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterInsertHooks executes all "after Insert" hooks.
func (o *ACLKeyAccess) doAfterInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range aclKeyAccessAfterInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpdateHooks executes all "before Update" hooks.
func (o *ACLKeyAccess) doBeforeUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range aclKeyAccessBeforeUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpdateHooks executes all "after Update" hooks.
func (o *ACLKeyAccess) doAfterUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range aclKeyAccessAfterUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeDeleteHooks executes all "before Delete" hooks.
func (o *ACLKeyAccess) doBeforeDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range aclKeyAccessBeforeDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterDeleteHooks executes all "after Delete" hooks.
func (o *ACLKeyAccess) doAfterDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range aclKeyAccessAfterDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpsertHooks executes all "before Upsert" hooks.
func (o *ACLKeyAccess) doBeforeUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range aclKeyAccessBeforeUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpsertHooks executes all "after Upsert" hooks.
func (o *ACLKeyAccess) doAfterUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range aclKeyAccessAfterUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// AddACLKeyAccessHook registers your hook function for all future operations.
func AddACLKeyAccessHook(hookPoint boil.HookPoint, aclKeyAccessHook ACLKeyAccessHook) {
	switch hookPoint {
	case boil.AfterSelectHook:
		aclKeyAccessAfterSelectHooks = append(aclKeyAccessAfterSelectHooks, aclKeyAccessHook)
	case boil.BeforeInsertHook:
		aclKeyAccessBeforeInsertHooks = append(aclKeyAccessBeforeInsertHooks, aclKeyAccessHook)
	case boil.AfterInsertHook:
		aclKeyAccessAfterInsertHooks = append(aclKeyAccessAfterInsertHooks, aclKeyAccessHook)
	case boil.BeforeUpdateHook:
		aclKeyAccessBeforeUpdateHooks = append(aclKeyAccessBeforeUpdateHooks, aclKeyAccessHook)
	case boil.AfterUpdateHook:
		aclKeyAccessAfterUpdateHooks = append(aclKeyAccessAfterUpdateHooks, aclKeyAccessHook)
	case boil.BeforeDeleteHook:
		aclKeyAccessBeforeDeleteHooks = append(aclKeyAccessBeforeDeleteHooks, aclKeyAccessHook)
	case boil.AfterDeleteHook:
		aclKeyAccessAfterDeleteHooks = append(aclKeyAccessAfterDeleteHooks, aclKeyAccessHook)
	case boil.BeforeUpsertHook:
		aclKeyAccessBeforeUpsertHooks = append(aclKeyAccessBeforeUpsertHooks, aclKeyAccessHook)
	case boil.AfterUpsertHook:
		aclKeyAccessAfterUpsertHooks = append(aclKeyAccessAfterUpsertHooks, aclKeyAccessHook)
	}
}

// One returns a single aclKeyAccess record from the query.
func (q aclKeyAccessQuery) One(ctx context.Context, exec boil.ContextExecutor) (*ACLKeyAccess, error) {
	o := &ACLKeyAccess{}

	queries.SetLimit(q.Query, 1)

	err := q.Bind(ctx, exec, o)
	if err != nil {
		if errors.Is(err, sql.ErrNoRows) {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: failed to execute a one query for acl_key_access")
	}

	if err := o.doAfterSelectHooks(ctx, exec); err != nil {
		return o, err
	}

	return o, nil
}

// All returns all ACLKeyAccess records from the query.
func (q aclKeyAccessQuery) All(ctx context.Context, exec boil.ContextExecutor) (ACLKeyAccessSlice, error) {
	var o []*ACLKeyAccess

	err := q.Bind(ctx, exec, &o)
	if err != nil {
		return nil, errors.Wrap(err, "models: failed to assign all query results to ACLKeyAccess slice")
	}

	if len(aclKeyAccessAfterSelectHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterSelectHooks(ctx, exec); err != nil {
				return o, err
			}
		}
	}

	return o, nil
}

// Count returns the count of all ACLKeyAccess records in the query.
func (q aclKeyAccessQuery) Count(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to count acl_key_access rows")
	}

	return count, nil
}

// Exists checks if the row exists in the table.
func (q aclKeyAccessQuery) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)
	queries.SetLimit(q.Query, 1)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return false, errors.Wrap(err, "models: failed to check if acl_key_access exists")
	}

	return count > 0, nil
}

// ACLKeyAccesses retrieves all the records using an executor.
func ACLKeyAccesses(mods ...qm.QueryMod) aclKeyAccessQuery {
	mods = append(mods, qm.From("\"acl_key_access\""))
	q := NewQuery(mods...)
	if len(queries.GetSelect(q)) == 0 {
		queries.SetSelect(q, []string{"\"acl_key_access\".*"})
	}

	return aclKeyAccessQuery{q}
}

// FindACLKeyAccess retrieves a single record by ID with an executor.
// If selectCols is empty Find will return all columns.
func FindACLKeyAccess(ctx context.Context, exec boil.ContextExecutor, iD int, selectCols ...string) (*ACLKeyAccess, error) {
	aclKeyAccessObj := &ACLKeyAccess{}

	sel := "*"
	if len(selectCols) > 0 {
		sel = strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, selectCols), ",")
	}
	query := fmt.Sprintf(
		"select %s from \"acl_key_access\" where \"id\"=$1", sel,
	)

	q := queries.Raw(query, iD)

	err := q.Bind(ctx, exec, aclKeyAccessObj)
	if err != nil {
		if errors.Is(err, sql.ErrNoRows) {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: unable to select from acl_key_access")
	}

	if err = aclKeyAccessObj.doAfterSelectHooks(ctx, exec); err != nil {
		return aclKeyAccessObj, err
	}

	return aclKeyAccessObj, nil
}

// Insert a single record using an executor.
// See boil.Columns.InsertColumnSet documentation to understand column list inference for inserts.
func (o *ACLKeyAccess) Insert(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) error {
	if o == nil {
		return errors.New("models: no acl_key_access provided for insertion")
	}

	var err error

	if err := o.doBeforeInsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(aclKeyAccessColumnsWithDefault, o)

	key := makeCacheKey(columns, nzDefaults)
	aclKeyAccessInsertCacheMut.RLock()
	cache, cached := aclKeyAccessInsertCache[key]
	aclKeyAccessInsertCacheMut.RUnlock()

	if !cached {
		wl, returnColumns := columns.InsertColumnSet(
			aclKeyAccessAllColumns,
			aclKeyAccessColumnsWithDefault,
			aclKeyAccessColumnsWithoutDefault,
			nzDefaults,
		)

		cache.valueMapping, err = queries.BindMapping(aclKeyAccessType, aclKeyAccessMapping, wl)
		if err != nil {
			return err
		}
		cache.retMapping, err = queries.BindMapping(aclKeyAccessType, aclKeyAccessMapping, returnColumns)
		if err != nil {
			return err
		}
		if len(wl) != 0 {
			cache.query = fmt.Sprintf("INSERT INTO \"acl_key_access\" (\"%s\") %%sVALUES (%s)%%s", strings.Join(wl, "\",\""), strmangle.Placeholders(dialect.UseIndexPlaceholders, len(wl), 1, 1))
		} else {
			cache.query = "INSERT INTO \"acl_key_access\" %sDEFAULT VALUES%s"
		}

		var queryOutput, queryReturning string

		if len(cache.retMapping) != 0 {
			queryReturning = fmt.Sprintf(" RETURNING \"%s\"", strings.Join(returnColumns, "\",\""))
		}

		cache.query = fmt.Sprintf(cache.query, queryOutput, queryReturning)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}

	if len(cache.retMapping) != 0 {
		err = exec.QueryRowContext(ctx, cache.query, vals...).Scan(queries.PtrsFromMapping(value, cache.retMapping)...)
	} else {
		_, err = exec.ExecContext(ctx, cache.query, vals...)
	}

	if err != nil {
		return errors.Wrap(err, "models: unable to insert into acl_key_access")
	}

	if !cached {
		aclKeyAccessInsertCacheMut.Lock()
		aclKeyAccessInsertCache[key] = cache
		aclKeyAccessInsertCacheMut.Unlock()
	}

	return o.doAfterInsertHooks(ctx, exec)
}

// Update uses an executor to update the ACLKeyAccess.
// See boil.Columns.UpdateColumnSet documentation to understand column list inference for updates.
// Update does not automatically update the record in case of default values. Use .Reload() to refresh the records.
func (o *ACLKeyAccess) Update(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) (int64, error) {
	var err error
	if err = o.doBeforeUpdateHooks(ctx, exec); err != nil {
		return 0, err
	}
	key := makeCacheKey(columns, nil)
	aclKeyAccessUpdateCacheMut.RLock()
	cache, cached := aclKeyAccessUpdateCache[key]
	aclKeyAccessUpdateCacheMut.RUnlock()

	if !cached {
		wl := columns.UpdateColumnSet(
			aclKeyAccessAllColumns,
			aclKeyAccessPrimaryKeyColumns,
		)

		if !columns.IsWhitelist() {
			wl = strmangle.SetComplement(wl, []string{"created_at"})
		}
		if len(wl) == 0 {
			return 0, errors.New("models: unable to update acl_key_access, could not build whitelist")
		}

		cache.query = fmt.Sprintf("UPDATE \"acl_key_access\" SET %s WHERE %s",
			strmangle.SetParamNames("\"", "\"", 1, wl),
			strmangle.WhereClause("\"", "\"", len(wl)+1, aclKeyAccessPrimaryKeyColumns),
		)
		cache.valueMapping, err = queries.BindMapping(aclKeyAccessType, aclKeyAccessMapping, append(wl, aclKeyAccessPrimaryKeyColumns...))
		if err != nil {
			return 0, err
		}
	}

	values := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, values)
	}
	var result sql.Result
	result, err = exec.ExecContext(ctx, cache.query, values...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update acl_key_access row")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by update for acl_key_access")
	}

	if !cached {
		aclKeyAccessUpdateCacheMut.Lock()
		aclKeyAccessUpdateCache[key] = cache
		aclKeyAccessUpdateCacheMut.Unlock()
	}

	return rowsAff, o.doAfterUpdateHooks(ctx, exec)
}

// UpdateAll updates all rows with the specified column values.
func (q aclKeyAccessQuery) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	queries.SetUpdate(q.Query, cols)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update all for acl_key_access")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to retrieve rows affected for acl_key_access")
	}

	return rowsAff, nil
}

// UpdateAll updates all rows with the specified column values, using an executor.
func (o ACLKeyAccessSlice) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	ln := int64(len(o))
	if ln == 0 {
		return 0, nil
	}

	if len(cols) == 0 {
		return 0, errors.New("models: update all requires at least one column argument")
	}

	colNames := make([]string, len(cols))
	args := make([]interface{}, len(cols))

	i := 0
	for name, value := range cols {
		colNames[i] = name
		args[i] = value
		i++
	}

	// Append all of the primary key values for each column
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), aclKeyAccessPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := fmt.Sprintf("UPDATE \"acl_key_access\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, colNames),
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), len(colNames)+1, aclKeyAccessPrimaryKeyColumns, len(o)))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update all in aclKeyAccess slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to retrieve rows affected all in update all aclKeyAccess")
	}
	return rowsAff, nil
}

// Upsert attempts an insert using an executor, and does an update or ignore on conflict.
// See boil.Columns documentation for how to properly use updateColumns and insertColumns.
func (o *ACLKeyAccess) Upsert(ctx context.Context, exec boil.ContextExecutor, updateOnConflict bool, conflictColumns []string, updateColumns, insertColumns boil.Columns) error {
	if o == nil {
		return errors.New("models: no acl_key_access provided for upsert")
	}

	if err := o.doBeforeUpsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(aclKeyAccessColumnsWithDefault, o)

	// Build cache key in-line uglily - mysql vs psql problems
	buf := strmangle.GetBuffer()
	if updateOnConflict {
		buf.WriteByte('t')
	} else {
		buf.WriteByte('f')
	}
	buf.WriteByte('.')
	for _, c := range conflictColumns {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(updateColumns.Kind))
	for _, c := range updateColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(insertColumns.Kind))
	for _, c := range insertColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzDefaults {
		buf.WriteString(c)
	}
	key := buf.String()
	strmangle.PutBuffer(buf)

	aclKeyAccessUpsertCacheMut.RLock()
	cache, cached := aclKeyAccessUpsertCache[key]
	aclKeyAccessUpsertCacheMut.RUnlock()

	var err error

	if !cached {
		insert, ret := insertColumns.InsertColumnSet(
			aclKeyAccessAllColumns,
			aclKeyAccessColumnsWithDefault,
			aclKeyAccessColumnsWithoutDefault,
			nzDefaults,
		)

		update := updateColumns.UpdateColumnSet(
			aclKeyAccessAllColumns,
			aclKeyAccessPrimaryKeyColumns,
		)

		if updateOnConflict && len(update) == 0 {
			return errors.New("models: unable to upsert acl_key_access, could not build update column list")
		}

		conflict := conflictColumns
		if len(conflict) == 0 {
			conflict = make([]string, len(aclKeyAccessPrimaryKeyColumns))
			copy(conflict, aclKeyAccessPrimaryKeyColumns)
		}
		cache.query = buildUpsertQueryPostgres(dialect, "\"acl_key_access\"", updateOnConflict, ret, update, conflict, insert)

		cache.valueMapping, err = queries.BindMapping(aclKeyAccessType, aclKeyAccessMapping, insert)
		if err != nil {
			return err
		}
		if len(ret) != 0 {
			cache.retMapping, err = queries.BindMapping(aclKeyAccessType, aclKeyAccessMapping, ret)
			if err != nil {
				return err
			}
		}
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)
	var returns []interface{}
	if len(cache.retMapping) != 0 {
		returns = queries.PtrsFromMapping(value, cache.retMapping)
	}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}
	if len(cache.retMapping) != 0 {
		err = exec.QueryRowContext(ctx, cache.query, vals...).Scan(returns...)
		if errors.Is(err, sql.ErrNoRows) {
			err = nil // Postgres doesn't return anything when there's no update
		}
	} else {
		_, err = exec.ExecContext(ctx, cache.query, vals...)
	}
	if err != nil {
		return errors.Wrap(err, "models: unable to upsert acl_key_access")
	}

	if !cached {
		aclKeyAccessUpsertCacheMut.Lock()
		aclKeyAccessUpsertCache[key] = cache
		aclKeyAccessUpsertCacheMut.Unlock()
	}

	return o.doAfterUpsertHooks(ctx, exec)
}

// Delete deletes a single ACLKeyAccess record with an executor.
// Delete will match against the primary key column to find the record to delete.
func (o *ACLKeyAccess) Delete(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if o == nil {
		return 0, errors.New("models: no ACLKeyAccess provided for delete")
	}

	if err := o.doBeforeDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	args := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), aclKeyAccessPrimaryKeyMapping)
	sql := "DELETE FROM \"acl_key_access\" WHERE \"id\"=$1"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete from acl_key_access")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by delete for acl_key_access")
	}

	if err := o.doAfterDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	return rowsAff, nil
}

// DeleteAll deletes all matching rows.
func (q aclKeyAccessQuery) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if q.Query == nil {
		return 0, errors.New("models: no aclKeyAccessQuery provided for delete all")
	}

	queries.SetDelete(q.Query)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete all from acl_key_access")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by deleteall for acl_key_access")
	}

	return rowsAff, nil
}

// DeleteAll deletes all rows in the slice, using an executor.
func (o ACLKeyAccessSlice) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if len(o) == 0 {
		return 0, nil
	}

	if len(aclKeyAccessBeforeDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doBeforeDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	var args []interface{}
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), aclKeyAccessPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "DELETE FROM \"acl_key_access\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, aclKeyAccessPrimaryKeyColumns, len(o))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete all from aclKeyAccess slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by deleteall for acl_key_access")
	}

	if len(aclKeyAccessAfterDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	return rowsAff, nil
}

// Reload refetches the object from the database
// using the primary keys with an executor.
func (o *ACLKeyAccess) Reload(ctx context.Context, exec boil.ContextExecutor) error {
	ret, err := FindACLKeyAccess(ctx, exec, o.ID)
	if err != nil {
		return err
	}

	*o = *ret
	return nil
}

// ReloadAll refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *ACLKeyAccessSlice) ReloadAll(ctx context.Context, exec boil.ContextExecutor) error {
	if o == nil || len(*o) == 0 {
		return nil
	}

	slice := ACLKeyAccessSlice{}
	var args []interface{}
	for _, obj := range *o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), aclKeyAccessPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "SELECT \"acl_key_access\".* FROM \"acl_key_access\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, aclKeyAccessPrimaryKeyColumns, len(*o))

	q := queries.Raw(sql, args...)

	err := q.Bind(ctx, exec, &slice)
	if err != nil {
		return errors.Wrap(err, "models: unable to reload all in ACLKeyAccessSlice")
	}

	*o = slice

	return nil
}

// ACLKeyAccessExists checks if the ACLKeyAccess row exists.
func ACLKeyAccessExists(ctx context.Context, exec boil.ContextExecutor, iD int) (bool, error) {
	var exists bool
	sql := "select exists(select 1 from \"acl_key_access\" where \"id\"=$1 limit 1)"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, iD)
	}
	row := exec.QueryRowContext(ctx, sql, iD)

	err := row.Scan(&exists)
	if err != nil {
		return false, errors.Wrap(err, "models: unable to check if acl_key_access exists")
	}

	return exists, nil
}
