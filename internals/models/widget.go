// Code generated by SQLBoiler 4.13.0 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package models

import (
	"context"
	"database/sql"
	"fmt"
	"reflect"
	"strconv"
	"strings"
	"sync"
	"time"

	"github.com/friendsofgo/errors"
	"github.com/volatiletech/null/v8"
	"github.com/volatiletech/sqlboiler/v4/boil"
	"github.com/volatiletech/sqlboiler/v4/queries"
	"github.com/volatiletech/sqlboiler/v4/queries/qm"
	"github.com/volatiletech/sqlboiler/v4/queries/qmhelper"
	"github.com/volatiletech/strmangle"
)

// Widget is an object representing the database table.
type Widget struct {
	ID          int        `boil:"id" json:"id" toml:"id" yaml:"id"`
	DashboardID int        `boil:"dashboard_id" json:"dashboard_id" toml:"dashboard_id" yaml:"dashboard_id"`
	TypeID      int        `boil:"type_id" json:"type_id" toml:"type_id" yaml:"type_id"`
	Seq         null.Int16 `boil:"seq" json:"seq,omitempty" toml:"seq" yaml:"seq,omitempty"`
	Detail      null.JSON  `boil:"detail" json:"detail,omitempty" toml:"detail" yaml:"detail,omitempty"`
	AssetID     null.Int   `boil:"asset_id" json:"asset_id,omitempty" toml:"asset_id" yaml:"asset_id,omitempty"`

	R *widgetR `boil:"-" json:"-" toml:"-" yaml:"-"`
	L widgetL  `boil:"-" json:"-" toml:"-" yaml:"-"`
}

var WidgetColumns = struct {
	ID          string
	DashboardID string
	TypeID      string
	Seq         string
	Detail      string
	AssetID     string
}{
	ID:          "id",
	DashboardID: "dashboard_id",
	TypeID:      "type_id",
	Seq:         "seq",
	Detail:      "detail",
	AssetID:     "asset_id",
}

var WidgetTableColumns = struct {
	ID          string
	DashboardID string
	TypeID      string
	Seq         string
	Detail      string
	AssetID     string
}{
	ID:          "widget.id",
	DashboardID: "widget.dashboard_id",
	TypeID:      "widget.type_id",
	Seq:         "widget.seq",
	Detail:      "widget.detail",
	AssetID:     "widget.asset_id",
}

// Generated where

var WidgetWhere = struct {
	ID          whereHelperint
	DashboardID whereHelperint
	TypeID      whereHelperint
	Seq         whereHelpernull_Int16
	Detail      whereHelpernull_JSON
	AssetID     whereHelpernull_Int
}{
	ID:          whereHelperint{field: "\"widget\".\"id\""},
	DashboardID: whereHelperint{field: "\"widget\".\"dashboard_id\""},
	TypeID:      whereHelperint{field: "\"widget\".\"type_id\""},
	Seq:         whereHelpernull_Int16{field: "\"widget\".\"seq\""},
	Detail:      whereHelpernull_JSON{field: "\"widget\".\"detail\""},
	AssetID:     whereHelpernull_Int{field: "\"widget\".\"asset_id\""},
}

// WidgetRels is where relationship names are stored.
var WidgetRels = struct {
}{}

// widgetR is where relationships are stored.
type widgetR struct {
}

// NewStruct creates a new relationship struct
func (*widgetR) NewStruct() *widgetR {
	return &widgetR{}
}

// widgetL is where Load methods for each relationship are stored.
type widgetL struct{}

var (
	widgetAllColumns            = []string{"id", "dashboard_id", "type_id", "seq", "detail", "asset_id"}
	widgetColumnsWithoutDefault = []string{"dashboard_id", "type_id"}
	widgetColumnsWithDefault    = []string{"id", "seq", "detail", "asset_id"}
	widgetPrimaryKeyColumns     = []string{"dashboard_id", "id"}
	widgetGeneratedColumns      = []string{}
)

type (
	// WidgetSlice is an alias for a slice of pointers to Widget.
	// This should almost always be used instead of []Widget.
	WidgetSlice []*Widget
	// WidgetHook is the signature for custom Widget hook methods
	WidgetHook func(context.Context, boil.ContextExecutor, *Widget) error

	widgetQuery struct {
		*queries.Query
	}
)

// Cache for insert, update and upsert
var (
	widgetType                 = reflect.TypeOf(&Widget{})
	widgetMapping              = queries.MakeStructMapping(widgetType)
	widgetPrimaryKeyMapping, _ = queries.BindMapping(widgetType, widgetMapping, widgetPrimaryKeyColumns)
	widgetInsertCacheMut       sync.RWMutex
	widgetInsertCache          = make(map[string]insertCache)
	widgetUpdateCacheMut       sync.RWMutex
	widgetUpdateCache          = make(map[string]updateCache)
	widgetUpsertCacheMut       sync.RWMutex
	widgetUpsertCache          = make(map[string]insertCache)
)

var (
	// Force time package dependency for automated UpdatedAt/CreatedAt.
	_ = time.Second
	// Force qmhelper dependency for where clause generation (which doesn't
	// always happen)
	_ = qmhelper.Where
)

var widgetAfterSelectHooks []WidgetHook

var widgetBeforeInsertHooks []WidgetHook
var widgetAfterInsertHooks []WidgetHook

var widgetBeforeUpdateHooks []WidgetHook
var widgetAfterUpdateHooks []WidgetHook

var widgetBeforeDeleteHooks []WidgetHook
var widgetAfterDeleteHooks []WidgetHook

var widgetBeforeUpsertHooks []WidgetHook
var widgetAfterUpsertHooks []WidgetHook

// doAfterSelectHooks executes all "after Select" hooks.
func (o *Widget) doAfterSelectHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range widgetAfterSelectHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeInsertHooks executes all "before insert" hooks.
func (o *Widget) doBeforeInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range widgetBeforeInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterInsertHooks executes all "after Insert" hooks.
func (o *Widget) doAfterInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range widgetAfterInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpdateHooks executes all "before Update" hooks.
func (o *Widget) doBeforeUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range widgetBeforeUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpdateHooks executes all "after Update" hooks.
func (o *Widget) doAfterUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range widgetAfterUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeDeleteHooks executes all "before Delete" hooks.
func (o *Widget) doBeforeDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range widgetBeforeDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterDeleteHooks executes all "after Delete" hooks.
func (o *Widget) doAfterDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range widgetAfterDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpsertHooks executes all "before Upsert" hooks.
func (o *Widget) doBeforeUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range widgetBeforeUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpsertHooks executes all "after Upsert" hooks.
func (o *Widget) doAfterUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range widgetAfterUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// AddWidgetHook registers your hook function for all future operations.
func AddWidgetHook(hookPoint boil.HookPoint, widgetHook WidgetHook) {
	switch hookPoint {
	case boil.AfterSelectHook:
		widgetAfterSelectHooks = append(widgetAfterSelectHooks, widgetHook)
	case boil.BeforeInsertHook:
		widgetBeforeInsertHooks = append(widgetBeforeInsertHooks, widgetHook)
	case boil.AfterInsertHook:
		widgetAfterInsertHooks = append(widgetAfterInsertHooks, widgetHook)
	case boil.BeforeUpdateHook:
		widgetBeforeUpdateHooks = append(widgetBeforeUpdateHooks, widgetHook)
	case boil.AfterUpdateHook:
		widgetAfterUpdateHooks = append(widgetAfterUpdateHooks, widgetHook)
	case boil.BeforeDeleteHook:
		widgetBeforeDeleteHooks = append(widgetBeforeDeleteHooks, widgetHook)
	case boil.AfterDeleteHook:
		widgetAfterDeleteHooks = append(widgetAfterDeleteHooks, widgetHook)
	case boil.BeforeUpsertHook:
		widgetBeforeUpsertHooks = append(widgetBeforeUpsertHooks, widgetHook)
	case boil.AfterUpsertHook:
		widgetAfterUpsertHooks = append(widgetAfterUpsertHooks, widgetHook)
	}
}

// One returns a single widget record from the query.
func (q widgetQuery) One(ctx context.Context, exec boil.ContextExecutor) (*Widget, error) {
	o := &Widget{}

	queries.SetLimit(q.Query, 1)

	err := q.Bind(ctx, exec, o)
	if err != nil {
		if errors.Is(err, sql.ErrNoRows) {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: failed to execute a one query for widget")
	}

	if err := o.doAfterSelectHooks(ctx, exec); err != nil {
		return o, err
	}

	return o, nil
}

// All returns all Widget records from the query.
func (q widgetQuery) All(ctx context.Context, exec boil.ContextExecutor) (WidgetSlice, error) {
	var o []*Widget

	err := q.Bind(ctx, exec, &o)
	if err != nil {
		return nil, errors.Wrap(err, "models: failed to assign all query results to Widget slice")
	}

	if len(widgetAfterSelectHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterSelectHooks(ctx, exec); err != nil {
				return o, err
			}
		}
	}

	return o, nil
}

// Count returns the count of all Widget records in the query.
func (q widgetQuery) Count(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to count widget rows")
	}

	return count, nil
}

// Exists checks if the row exists in the table.
func (q widgetQuery) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)
	queries.SetLimit(q.Query, 1)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return false, errors.Wrap(err, "models: failed to check if widget exists")
	}

	return count > 0, nil
}

// Widgets retrieves all the records using an executor.
func Widgets(mods ...qm.QueryMod) widgetQuery {
	mods = append(mods, qm.From("\"widget\""))
	q := NewQuery(mods...)
	if len(queries.GetSelect(q)) == 0 {
		queries.SetSelect(q, []string{"\"widget\".*"})
	}

	return widgetQuery{q}
}

// FindWidget retrieves a single record by ID with an executor.
// If selectCols is empty Find will return all columns.
func FindWidget(ctx context.Context, exec boil.ContextExecutor, dashboardID int, iD int, selectCols ...string) (*Widget, error) {
	widgetObj := &Widget{}

	sel := "*"
	if len(selectCols) > 0 {
		sel = strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, selectCols), ",")
	}
	query := fmt.Sprintf(
		"select %s from \"widget\" where \"dashboard_id\"=$1 AND \"id\"=$2", sel,
	)

	q := queries.Raw(query, dashboardID, iD)

	err := q.Bind(ctx, exec, widgetObj)
	if err != nil {
		if errors.Is(err, sql.ErrNoRows) {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: unable to select from widget")
	}

	if err = widgetObj.doAfterSelectHooks(ctx, exec); err != nil {
		return widgetObj, err
	}

	return widgetObj, nil
}

// Insert a single record using an executor.
// See boil.Columns.InsertColumnSet documentation to understand column list inference for inserts.
func (o *Widget) Insert(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) error {
	if o == nil {
		return errors.New("models: no widget provided for insertion")
	}

	var err error

	if err := o.doBeforeInsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(widgetColumnsWithDefault, o)

	key := makeCacheKey(columns, nzDefaults)
	widgetInsertCacheMut.RLock()
	cache, cached := widgetInsertCache[key]
	widgetInsertCacheMut.RUnlock()

	if !cached {
		wl, returnColumns := columns.InsertColumnSet(
			widgetAllColumns,
			widgetColumnsWithDefault,
			widgetColumnsWithoutDefault,
			nzDefaults,
		)

		cache.valueMapping, err = queries.BindMapping(widgetType, widgetMapping, wl)
		if err != nil {
			return err
		}
		cache.retMapping, err = queries.BindMapping(widgetType, widgetMapping, returnColumns)
		if err != nil {
			return err
		}
		if len(wl) != 0 {
			cache.query = fmt.Sprintf("INSERT INTO \"widget\" (\"%s\") %%sVALUES (%s)%%s", strings.Join(wl, "\",\""), strmangle.Placeholders(dialect.UseIndexPlaceholders, len(wl), 1, 1))
		} else {
			cache.query = "INSERT INTO \"widget\" %sDEFAULT VALUES%s"
		}

		var queryOutput, queryReturning string

		if len(cache.retMapping) != 0 {
			queryReturning = fmt.Sprintf(" RETURNING \"%s\"", strings.Join(returnColumns, "\",\""))
		}

		cache.query = fmt.Sprintf(cache.query, queryOutput, queryReturning)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}

	if len(cache.retMapping) != 0 {
		err = exec.QueryRowContext(ctx, cache.query, vals...).Scan(queries.PtrsFromMapping(value, cache.retMapping)...)
	} else {
		_, err = exec.ExecContext(ctx, cache.query, vals...)
	}

	if err != nil {
		return errors.Wrap(err, "models: unable to insert into widget")
	}

	if !cached {
		widgetInsertCacheMut.Lock()
		widgetInsertCache[key] = cache
		widgetInsertCacheMut.Unlock()
	}

	return o.doAfterInsertHooks(ctx, exec)
}

// Update uses an executor to update the Widget.
// See boil.Columns.UpdateColumnSet documentation to understand column list inference for updates.
// Update does not automatically update the record in case of default values. Use .Reload() to refresh the records.
func (o *Widget) Update(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) (int64, error) {
	var err error
	if err = o.doBeforeUpdateHooks(ctx, exec); err != nil {
		return 0, err
	}
	key := makeCacheKey(columns, nil)
	widgetUpdateCacheMut.RLock()
	cache, cached := widgetUpdateCache[key]
	widgetUpdateCacheMut.RUnlock()

	if !cached {
		wl := columns.UpdateColumnSet(
			widgetAllColumns,
			widgetPrimaryKeyColumns,
		)

		if !columns.IsWhitelist() {
			wl = strmangle.SetComplement(wl, []string{"created_at"})
		}
		if len(wl) == 0 {
			return 0, errors.New("models: unable to update widget, could not build whitelist")
		}

		cache.query = fmt.Sprintf("UPDATE \"widget\" SET %s WHERE %s",
			strmangle.SetParamNames("\"", "\"", 1, wl),
			strmangle.WhereClause("\"", "\"", len(wl)+1, widgetPrimaryKeyColumns),
		)
		cache.valueMapping, err = queries.BindMapping(widgetType, widgetMapping, append(wl, widgetPrimaryKeyColumns...))
		if err != nil {
			return 0, err
		}
	}

	values := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, values)
	}
	var result sql.Result
	result, err = exec.ExecContext(ctx, cache.query, values...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update widget row")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by update for widget")
	}

	if !cached {
		widgetUpdateCacheMut.Lock()
		widgetUpdateCache[key] = cache
		widgetUpdateCacheMut.Unlock()
	}

	return rowsAff, o.doAfterUpdateHooks(ctx, exec)
}

// UpdateAll updates all rows with the specified column values.
func (q widgetQuery) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	queries.SetUpdate(q.Query, cols)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update all for widget")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to retrieve rows affected for widget")
	}

	return rowsAff, nil
}

// UpdateAll updates all rows with the specified column values, using an executor.
func (o WidgetSlice) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	ln := int64(len(o))
	if ln == 0 {
		return 0, nil
	}

	if len(cols) == 0 {
		return 0, errors.New("models: update all requires at least one column argument")
	}

	colNames := make([]string, len(cols))
	args := make([]interface{}, len(cols))

	i := 0
	for name, value := range cols {
		colNames[i] = name
		args[i] = value
		i++
	}

	// Append all of the primary key values for each column
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), widgetPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := fmt.Sprintf("UPDATE \"widget\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, colNames),
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), len(colNames)+1, widgetPrimaryKeyColumns, len(o)))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update all in widget slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to retrieve rows affected all in update all widget")
	}
	return rowsAff, nil
}

// Upsert attempts an insert using an executor, and does an update or ignore on conflict.
// See boil.Columns documentation for how to properly use updateColumns and insertColumns.
func (o *Widget) Upsert(ctx context.Context, exec boil.ContextExecutor, updateOnConflict bool, conflictColumns []string, updateColumns, insertColumns boil.Columns) error {
	if o == nil {
		return errors.New("models: no widget provided for upsert")
	}

	if err := o.doBeforeUpsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(widgetColumnsWithDefault, o)

	// Build cache key in-line uglily - mysql vs psql problems
	buf := strmangle.GetBuffer()
	if updateOnConflict {
		buf.WriteByte('t')
	} else {
		buf.WriteByte('f')
	}
	buf.WriteByte('.')
	for _, c := range conflictColumns {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(updateColumns.Kind))
	for _, c := range updateColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(insertColumns.Kind))
	for _, c := range insertColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzDefaults {
		buf.WriteString(c)
	}
	key := buf.String()
	strmangle.PutBuffer(buf)

	widgetUpsertCacheMut.RLock()
	cache, cached := widgetUpsertCache[key]
	widgetUpsertCacheMut.RUnlock()

	var err error

	if !cached {
		insert, ret := insertColumns.InsertColumnSet(
			widgetAllColumns,
			widgetColumnsWithDefault,
			widgetColumnsWithoutDefault,
			nzDefaults,
		)

		update := updateColumns.UpdateColumnSet(
			widgetAllColumns,
			widgetPrimaryKeyColumns,
		)

		if updateOnConflict && len(update) == 0 {
			return errors.New("models: unable to upsert widget, could not build update column list")
		}

		conflict := conflictColumns
		if len(conflict) == 0 {
			conflict = make([]string, len(widgetPrimaryKeyColumns))
			copy(conflict, widgetPrimaryKeyColumns)
		}
		cache.query = buildUpsertQueryPostgres(dialect, "\"widget\"", updateOnConflict, ret, update, conflict, insert)

		cache.valueMapping, err = queries.BindMapping(widgetType, widgetMapping, insert)
		if err != nil {
			return err
		}
		if len(ret) != 0 {
			cache.retMapping, err = queries.BindMapping(widgetType, widgetMapping, ret)
			if err != nil {
				return err
			}
		}
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)
	var returns []interface{}
	if len(cache.retMapping) != 0 {
		returns = queries.PtrsFromMapping(value, cache.retMapping)
	}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}
	if len(cache.retMapping) != 0 {
		err = exec.QueryRowContext(ctx, cache.query, vals...).Scan(returns...)
		if errors.Is(err, sql.ErrNoRows) {
			err = nil // Postgres doesn't return anything when there's no update
		}
	} else {
		_, err = exec.ExecContext(ctx, cache.query, vals...)
	}
	if err != nil {
		return errors.Wrap(err, "models: unable to upsert widget")
	}

	if !cached {
		widgetUpsertCacheMut.Lock()
		widgetUpsertCache[key] = cache
		widgetUpsertCacheMut.Unlock()
	}

	return o.doAfterUpsertHooks(ctx, exec)
}

// Delete deletes a single Widget record with an executor.
// Delete will match against the primary key column to find the record to delete.
func (o *Widget) Delete(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if o == nil {
		return 0, errors.New("models: no Widget provided for delete")
	}

	if err := o.doBeforeDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	args := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), widgetPrimaryKeyMapping)
	sql := "DELETE FROM \"widget\" WHERE \"dashboard_id\"=$1 AND \"id\"=$2"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete from widget")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by delete for widget")
	}

	if err := o.doAfterDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	return rowsAff, nil
}

// DeleteAll deletes all matching rows.
func (q widgetQuery) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if q.Query == nil {
		return 0, errors.New("models: no widgetQuery provided for delete all")
	}

	queries.SetDelete(q.Query)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete all from widget")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by deleteall for widget")
	}

	return rowsAff, nil
}

// DeleteAll deletes all rows in the slice, using an executor.
func (o WidgetSlice) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if len(o) == 0 {
		return 0, nil
	}

	if len(widgetBeforeDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doBeforeDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	var args []interface{}
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), widgetPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "DELETE FROM \"widget\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, widgetPrimaryKeyColumns, len(o))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete all from widget slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by deleteall for widget")
	}

	if len(widgetAfterDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	return rowsAff, nil
}

// Reload refetches the object from the database
// using the primary keys with an executor.
func (o *Widget) Reload(ctx context.Context, exec boil.ContextExecutor) error {
	ret, err := FindWidget(ctx, exec, o.DashboardID, o.ID)
	if err != nil {
		return err
	}

	*o = *ret
	return nil
}

// ReloadAll refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *WidgetSlice) ReloadAll(ctx context.Context, exec boil.ContextExecutor) error {
	if o == nil || len(*o) == 0 {
		return nil
	}

	slice := WidgetSlice{}
	var args []interface{}
	for _, obj := range *o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), widgetPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "SELECT \"widget\".* FROM \"widget\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, widgetPrimaryKeyColumns, len(*o))

	q := queries.Raw(sql, args...)

	err := q.Bind(ctx, exec, &slice)
	if err != nil {
		return errors.Wrap(err, "models: unable to reload all in WidgetSlice")
	}

	*o = slice

	return nil
}

// WidgetExists checks if the Widget row exists.
func WidgetExists(ctx context.Context, exec boil.ContextExecutor, dashboardID int, iD int) (bool, error) {
	var exists bool
	sql := "select exists(select 1 from \"widget\" where \"dashboard_id\"=$1 AND \"id\"=$2 limit 1)"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, dashboardID, iD)
	}
	row := exec.QueryRowContext(ctx, sql, dashboardID, iD)

	err := row.Scan(&exists)
	if err != nil {
		return false, errors.Wrap(err, "models: unable to check if widget exists")
	}

	return exists, nil
}
