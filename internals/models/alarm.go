// Code generated by SQLBoiler 4.13.0 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package models

import (
	"context"
	"database/sql"
	"fmt"
	"reflect"
	"strconv"
	"strings"
	"sync"
	"time"

	"github.com/friendsofgo/errors"
	"github.com/volatiletech/null/v8"
	"github.com/volatiletech/sqlboiler/v4/boil"
	"github.com/volatiletech/sqlboiler/v4/queries"
	"github.com/volatiletech/sqlboiler/v4/queries/qm"
	"github.com/volatiletech/sqlboiler/v4/queries/qmhelper"
	"github.com/volatiletech/sqlboiler/v4/types"
	"github.com/volatiletech/strmangle"
)

// Alarm is an object representing the database table.
type Alarm struct {
	AlarmID    int          `boil:"alarm_id" json:"alarm_id" toml:"alarm_id" yaml:"alarm_id"`
	AssetID    int          `boil:"asset_id" json:"asset_id" toml:"asset_id" yaml:"asset_id"`
	Subtype    null.String  `boil:"subtype" json:"subtype,omitempty" toml:"subtype" yaml:"subtype,omitempty"`
	Attribute  null.String  `boil:"attribute" json:"attribute,omitempty" toml:"attribute" yaml:"attribute,omitempty"`
	Prio       int16        `boil:"prio" json:"prio" toml:"prio" yaml:"prio"`
	Val        null.Float64 `boil:"val" json:"val,omitempty" toml:"val" yaml:"val,omitempty"`
	AckP       bool         `boil:"ack_p" json:"ack_p" toml:"ack_p" yaml:"ack_p"`
	TS         time.Time    `boil:"ts" json:"ts" toml:"ts" yaml:"ts"`
	GoneTS     null.Time    `boil:"gone_ts" json:"gone_ts,omitempty" toml:"gone_ts" yaml:"gone_ts,omitempty"`
	AckTS      null.Time    `boil:"ack_ts" json:"ack_ts,omitempty" toml:"ack_ts" yaml:"ack_ts,omitempty"`
	AutoQuench null.Time    `boil:"auto_quench" json:"auto_quench,omitempty" toml:"auto_quench" yaml:"auto_quench,omitempty"`
	Multi      int          `boil:"multi" json:"multi" toml:"multi" yaml:"multi"`
	Message    types.JSON   `boil:"message" json:"message" toml:"message" yaml:"message"`
	AckText    null.String  `boil:"ack_text" json:"ack_text,omitempty" toml:"ack_text" yaml:"ack_text,omitempty"`
	AckUserID  null.String  `boil:"ack_user_id" json:"ack_user_id,omitempty" toml:"ack_user_id" yaml:"ack_user_id,omitempty"`

	R *alarmR `boil:"-" json:"-" toml:"-" yaml:"-"`
	L alarmL  `boil:"-" json:"-" toml:"-" yaml:"-"`
}

var AlarmColumns = struct {
	AlarmID    string
	AssetID    string
	Subtype    string
	Attribute  string
	Prio       string
	Val        string
	AckP       string
	TS         string
	GoneTS     string
	AckTS      string
	AutoQuench string
	Multi      string
	Message    string
	AckText    string
	AckUserID  string
}{
	AlarmID:    "alarm_id",
	AssetID:    "asset_id",
	Subtype:    "subtype",
	Attribute:  "attribute",
	Prio:       "prio",
	Val:        "val",
	AckP:       "ack_p",
	TS:         "ts",
	GoneTS:     "gone_ts",
	AckTS:      "ack_ts",
	AutoQuench: "auto_quench",
	Multi:      "multi",
	Message:    "message",
	AckText:    "ack_text",
	AckUserID:  "ack_user_id",
}

var AlarmTableColumns = struct {
	AlarmID    string
	AssetID    string
	Subtype    string
	Attribute  string
	Prio       string
	Val        string
	AckP       string
	TS         string
	GoneTS     string
	AckTS      string
	AutoQuench string
	Multi      string
	Message    string
	AckText    string
	AckUserID  string
}{
	AlarmID:    "alarm.alarm_id",
	AssetID:    "alarm.asset_id",
	Subtype:    "alarm.subtype",
	Attribute:  "alarm.attribute",
	Prio:       "alarm.prio",
	Val:        "alarm.val",
	AckP:       "alarm.ack_p",
	TS:         "alarm.ts",
	GoneTS:     "alarm.gone_ts",
	AckTS:      "alarm.ack_ts",
	AutoQuench: "alarm.auto_quench",
	Multi:      "alarm.multi",
	Message:    "alarm.message",
	AckText:    "alarm.ack_text",
	AckUserID:  "alarm.ack_user_id",
}

// Generated where

type whereHelperint16 struct{ field string }

func (w whereHelperint16) EQ(x int16) qm.QueryMod  { return qmhelper.Where(w.field, qmhelper.EQ, x) }
func (w whereHelperint16) NEQ(x int16) qm.QueryMod { return qmhelper.Where(w.field, qmhelper.NEQ, x) }
func (w whereHelperint16) LT(x int16) qm.QueryMod  { return qmhelper.Where(w.field, qmhelper.LT, x) }
func (w whereHelperint16) LTE(x int16) qm.QueryMod { return qmhelper.Where(w.field, qmhelper.LTE, x) }
func (w whereHelperint16) GT(x int16) qm.QueryMod  { return qmhelper.Where(w.field, qmhelper.GT, x) }
func (w whereHelperint16) GTE(x int16) qm.QueryMod { return qmhelper.Where(w.field, qmhelper.GTE, x) }
func (w whereHelperint16) IN(slice []int16) qm.QueryMod {
	values := make([]interface{}, 0, len(slice))
	for _, value := range slice {
		values = append(values, value)
	}
	return qm.WhereIn(fmt.Sprintf("%s IN ?", w.field), values...)
}
func (w whereHelperint16) NIN(slice []int16) qm.QueryMod {
	values := make([]interface{}, 0, len(slice))
	for _, value := range slice {
		values = append(values, value)
	}
	return qm.WhereNotIn(fmt.Sprintf("%s NOT IN ?", w.field), values...)
}

type whereHelpernull_Float64 struct{ field string }

func (w whereHelpernull_Float64) EQ(x null.Float64) qm.QueryMod {
	return qmhelper.WhereNullEQ(w.field, false, x)
}
func (w whereHelpernull_Float64) NEQ(x null.Float64) qm.QueryMod {
	return qmhelper.WhereNullEQ(w.field, true, x)
}
func (w whereHelpernull_Float64) LT(x null.Float64) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.LT, x)
}
func (w whereHelpernull_Float64) LTE(x null.Float64) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.LTE, x)
}
func (w whereHelpernull_Float64) GT(x null.Float64) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.GT, x)
}
func (w whereHelpernull_Float64) GTE(x null.Float64) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.GTE, x)
}
func (w whereHelpernull_Float64) IN(slice []float64) qm.QueryMod {
	values := make([]interface{}, 0, len(slice))
	for _, value := range slice {
		values = append(values, value)
	}
	return qm.WhereIn(fmt.Sprintf("%s IN ?", w.field), values...)
}
func (w whereHelpernull_Float64) NIN(slice []float64) qm.QueryMod {
	values := make([]interface{}, 0, len(slice))
	for _, value := range slice {
		values = append(values, value)
	}
	return qm.WhereNotIn(fmt.Sprintf("%s NOT IN ?", w.field), values...)
}

func (w whereHelpernull_Float64) IsNull() qm.QueryMod    { return qmhelper.WhereIsNull(w.field) }
func (w whereHelpernull_Float64) IsNotNull() qm.QueryMod { return qmhelper.WhereIsNotNull(w.field) }

type whereHelperbool struct{ field string }

func (w whereHelperbool) EQ(x bool) qm.QueryMod  { return qmhelper.Where(w.field, qmhelper.EQ, x) }
func (w whereHelperbool) NEQ(x bool) qm.QueryMod { return qmhelper.Where(w.field, qmhelper.NEQ, x) }
func (w whereHelperbool) LT(x bool) qm.QueryMod  { return qmhelper.Where(w.field, qmhelper.LT, x) }
func (w whereHelperbool) LTE(x bool) qm.QueryMod { return qmhelper.Where(w.field, qmhelper.LTE, x) }
func (w whereHelperbool) GT(x bool) qm.QueryMod  { return qmhelper.Where(w.field, qmhelper.GT, x) }
func (w whereHelperbool) GTE(x bool) qm.QueryMod { return qmhelper.Where(w.field, qmhelper.GTE, x) }

type whereHelpertime_Time struct{ field string }

func (w whereHelpertime_Time) EQ(x time.Time) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.EQ, x)
}
func (w whereHelpertime_Time) NEQ(x time.Time) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.NEQ, x)
}
func (w whereHelpertime_Time) LT(x time.Time) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.LT, x)
}
func (w whereHelpertime_Time) LTE(x time.Time) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.LTE, x)
}
func (w whereHelpertime_Time) GT(x time.Time) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.GT, x)
}
func (w whereHelpertime_Time) GTE(x time.Time) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.GTE, x)
}

type whereHelpernull_Time struct{ field string }

func (w whereHelpernull_Time) EQ(x null.Time) qm.QueryMod {
	return qmhelper.WhereNullEQ(w.field, false, x)
}
func (w whereHelpernull_Time) NEQ(x null.Time) qm.QueryMod {
	return qmhelper.WhereNullEQ(w.field, true, x)
}
func (w whereHelpernull_Time) LT(x null.Time) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.LT, x)
}
func (w whereHelpernull_Time) LTE(x null.Time) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.LTE, x)
}
func (w whereHelpernull_Time) GT(x null.Time) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.GT, x)
}
func (w whereHelpernull_Time) GTE(x null.Time) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.GTE, x)
}

func (w whereHelpernull_Time) IsNull() qm.QueryMod    { return qmhelper.WhereIsNull(w.field) }
func (w whereHelpernull_Time) IsNotNull() qm.QueryMod { return qmhelper.WhereIsNotNull(w.field) }

type whereHelpertypes_JSON struct{ field string }

func (w whereHelpertypes_JSON) EQ(x types.JSON) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.EQ, x)
}
func (w whereHelpertypes_JSON) NEQ(x types.JSON) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.NEQ, x)
}
func (w whereHelpertypes_JSON) LT(x types.JSON) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.LT, x)
}
func (w whereHelpertypes_JSON) LTE(x types.JSON) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.LTE, x)
}
func (w whereHelpertypes_JSON) GT(x types.JSON) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.GT, x)
}
func (w whereHelpertypes_JSON) GTE(x types.JSON) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.GTE, x)
}

var AlarmWhere = struct {
	AlarmID    whereHelperint
	AssetID    whereHelperint
	Subtype    whereHelpernull_String
	Attribute  whereHelpernull_String
	Prio       whereHelperint16
	Val        whereHelpernull_Float64
	AckP       whereHelperbool
	TS         whereHelpertime_Time
	GoneTS     whereHelpernull_Time
	AckTS      whereHelpernull_Time
	AutoQuench whereHelpernull_Time
	Multi      whereHelperint
	Message    whereHelpertypes_JSON
	AckText    whereHelpernull_String
	AckUserID  whereHelpernull_String
}{
	AlarmID:    whereHelperint{field: "\"alarm\".\"alarm_id\""},
	AssetID:    whereHelperint{field: "\"alarm\".\"asset_id\""},
	Subtype:    whereHelpernull_String{field: "\"alarm\".\"subtype\""},
	Attribute:  whereHelpernull_String{field: "\"alarm\".\"attribute\""},
	Prio:       whereHelperint16{field: "\"alarm\".\"prio\""},
	Val:        whereHelpernull_Float64{field: "\"alarm\".\"val\""},
	AckP:       whereHelperbool{field: "\"alarm\".\"ack_p\""},
	TS:         whereHelpertime_Time{field: "\"alarm\".\"ts\""},
	GoneTS:     whereHelpernull_Time{field: "\"alarm\".\"gone_ts\""},
	AckTS:      whereHelpernull_Time{field: "\"alarm\".\"ack_ts\""},
	AutoQuench: whereHelpernull_Time{field: "\"alarm\".\"auto_quench\""},
	Multi:      whereHelperint{field: "\"alarm\".\"multi\""},
	Message:    whereHelpertypes_JSON{field: "\"alarm\".\"message\""},
	AckText:    whereHelpernull_String{field: "\"alarm\".\"ack_text\""},
	AckUserID:  whereHelpernull_String{field: "\"alarm\".\"ack_user_id\""},
}

// AlarmRels is where relationship names are stored.
var AlarmRels = struct {
}{}

// alarmR is where relationships are stored.
type alarmR struct {
}

// NewStruct creates a new relationship struct
func (*alarmR) NewStruct() *alarmR {
	return &alarmR{}
}

// alarmL is where Load methods for each relationship are stored.
type alarmL struct{}

var (
	alarmAllColumns            = []string{"alarm_id", "asset_id", "subtype", "attribute", "prio", "val", "ack_p", "ts", "gone_ts", "ack_ts", "auto_quench", "multi", "message", "ack_text", "ack_user_id"}
	alarmColumnsWithoutDefault = []string{"alarm_id", "asset_id", "prio", "ack_p", "ts", "message"}
	alarmColumnsWithDefault    = []string{"subtype", "attribute", "val", "gone_ts", "ack_ts", "auto_quench", "multi", "ack_text", "ack_user_id"}
	alarmPrimaryKeyColumns     = []string{"alarm_id"}
	alarmGeneratedColumns      = []string{}
)

type (
	// AlarmSlice is an alias for a slice of pointers to Alarm.
	// This should almost always be used instead of []Alarm.
	AlarmSlice []*Alarm
	// AlarmHook is the signature for custom Alarm hook methods
	AlarmHook func(context.Context, boil.ContextExecutor, *Alarm) error

	alarmQuery struct {
		*queries.Query
	}
)

// Cache for insert, update and upsert
var (
	alarmType                 = reflect.TypeOf(&Alarm{})
	alarmMapping              = queries.MakeStructMapping(alarmType)
	alarmPrimaryKeyMapping, _ = queries.BindMapping(alarmType, alarmMapping, alarmPrimaryKeyColumns)
	alarmInsertCacheMut       sync.RWMutex
	alarmInsertCache          = make(map[string]insertCache)
	alarmUpdateCacheMut       sync.RWMutex
	alarmUpdateCache          = make(map[string]updateCache)
	alarmUpsertCacheMut       sync.RWMutex
	alarmUpsertCache          = make(map[string]insertCache)
)

var (
	// Force time package dependency for automated UpdatedAt/CreatedAt.
	_ = time.Second
	// Force qmhelper dependency for where clause generation (which doesn't
	// always happen)
	_ = qmhelper.Where
)

var alarmAfterSelectHooks []AlarmHook

var alarmBeforeInsertHooks []AlarmHook
var alarmAfterInsertHooks []AlarmHook

var alarmBeforeUpdateHooks []AlarmHook
var alarmAfterUpdateHooks []AlarmHook

var alarmBeforeDeleteHooks []AlarmHook
var alarmAfterDeleteHooks []AlarmHook

var alarmBeforeUpsertHooks []AlarmHook
var alarmAfterUpsertHooks []AlarmHook

// doAfterSelectHooks executes all "after Select" hooks.
func (o *Alarm) doAfterSelectHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range alarmAfterSelectHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeInsertHooks executes all "before insert" hooks.
func (o *Alarm) doBeforeInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range alarmBeforeInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterInsertHooks executes all "after Insert" hooks.
func (o *Alarm) doAfterInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range alarmAfterInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpdateHooks executes all "before Update" hooks.
func (o *Alarm) doBeforeUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range alarmBeforeUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpdateHooks executes all "after Update" hooks.
func (o *Alarm) doAfterUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range alarmAfterUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeDeleteHooks executes all "before Delete" hooks.
func (o *Alarm) doBeforeDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range alarmBeforeDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterDeleteHooks executes all "after Delete" hooks.
func (o *Alarm) doAfterDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range alarmAfterDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpsertHooks executes all "before Upsert" hooks.
func (o *Alarm) doBeforeUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range alarmBeforeUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpsertHooks executes all "after Upsert" hooks.
func (o *Alarm) doAfterUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range alarmAfterUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// AddAlarmHook registers your hook function for all future operations.
func AddAlarmHook(hookPoint boil.HookPoint, alarmHook AlarmHook) {
	switch hookPoint {
	case boil.AfterSelectHook:
		alarmAfterSelectHooks = append(alarmAfterSelectHooks, alarmHook)
	case boil.BeforeInsertHook:
		alarmBeforeInsertHooks = append(alarmBeforeInsertHooks, alarmHook)
	case boil.AfterInsertHook:
		alarmAfterInsertHooks = append(alarmAfterInsertHooks, alarmHook)
	case boil.BeforeUpdateHook:
		alarmBeforeUpdateHooks = append(alarmBeforeUpdateHooks, alarmHook)
	case boil.AfterUpdateHook:
		alarmAfterUpdateHooks = append(alarmAfterUpdateHooks, alarmHook)
	case boil.BeforeDeleteHook:
		alarmBeforeDeleteHooks = append(alarmBeforeDeleteHooks, alarmHook)
	case boil.AfterDeleteHook:
		alarmAfterDeleteHooks = append(alarmAfterDeleteHooks, alarmHook)
	case boil.BeforeUpsertHook:
		alarmBeforeUpsertHooks = append(alarmBeforeUpsertHooks, alarmHook)
	case boil.AfterUpsertHook:
		alarmAfterUpsertHooks = append(alarmAfterUpsertHooks, alarmHook)
	}
}

// One returns a single alarm record from the query.
func (q alarmQuery) One(ctx context.Context, exec boil.ContextExecutor) (*Alarm, error) {
	o := &Alarm{}

	queries.SetLimit(q.Query, 1)

	err := q.Bind(ctx, exec, o)
	if err != nil {
		if errors.Is(err, sql.ErrNoRows) {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: failed to execute a one query for alarm")
	}

	if err := o.doAfterSelectHooks(ctx, exec); err != nil {
		return o, err
	}

	return o, nil
}

// All returns all Alarm records from the query.
func (q alarmQuery) All(ctx context.Context, exec boil.ContextExecutor) (AlarmSlice, error) {
	var o []*Alarm

	err := q.Bind(ctx, exec, &o)
	if err != nil {
		return nil, errors.Wrap(err, "models: failed to assign all query results to Alarm slice")
	}

	if len(alarmAfterSelectHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterSelectHooks(ctx, exec); err != nil {
				return o, err
			}
		}
	}

	return o, nil
}

// Count returns the count of all Alarm records in the query.
func (q alarmQuery) Count(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to count alarm rows")
	}

	return count, nil
}

// Exists checks if the row exists in the table.
func (q alarmQuery) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)
	queries.SetLimit(q.Query, 1)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return false, errors.Wrap(err, "models: failed to check if alarm exists")
	}

	return count > 0, nil
}

// Alarms retrieves all the records using an executor.
func Alarms(mods ...qm.QueryMod) alarmQuery {
	mods = append(mods, qm.From("\"alarm\""))
	q := NewQuery(mods...)
	if len(queries.GetSelect(q)) == 0 {
		queries.SetSelect(q, []string{"\"alarm\".*"})
	}

	return alarmQuery{q}
}

// FindAlarm retrieves a single record by ID with an executor.
// If selectCols is empty Find will return all columns.
func FindAlarm(ctx context.Context, exec boil.ContextExecutor, alarmID int, selectCols ...string) (*Alarm, error) {
	alarmObj := &Alarm{}

	sel := "*"
	if len(selectCols) > 0 {
		sel = strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, selectCols), ",")
	}
	query := fmt.Sprintf(
		"select %s from \"alarm\" where \"alarm_id\"=$1", sel,
	)

	q := queries.Raw(query, alarmID)

	err := q.Bind(ctx, exec, alarmObj)
	if err != nil {
		if errors.Is(err, sql.ErrNoRows) {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: unable to select from alarm")
	}

	if err = alarmObj.doAfterSelectHooks(ctx, exec); err != nil {
		return alarmObj, err
	}

	return alarmObj, nil
}

// Insert a single record using an executor.
// See boil.Columns.InsertColumnSet documentation to understand column list inference for inserts.
func (o *Alarm) Insert(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) error {
	if o == nil {
		return errors.New("models: no alarm provided for insertion")
	}

	var err error

	if err := o.doBeforeInsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(alarmColumnsWithDefault, o)

	key := makeCacheKey(columns, nzDefaults)
	alarmInsertCacheMut.RLock()
	cache, cached := alarmInsertCache[key]
	alarmInsertCacheMut.RUnlock()

	if !cached {
		wl, returnColumns := columns.InsertColumnSet(
			alarmAllColumns,
			alarmColumnsWithDefault,
			alarmColumnsWithoutDefault,
			nzDefaults,
		)

		cache.valueMapping, err = queries.BindMapping(alarmType, alarmMapping, wl)
		if err != nil {
			return err
		}
		cache.retMapping, err = queries.BindMapping(alarmType, alarmMapping, returnColumns)
		if err != nil {
			return err
		}
		if len(wl) != 0 {
			cache.query = fmt.Sprintf("INSERT INTO \"alarm\" (\"%s\") %%sVALUES (%s)%%s", strings.Join(wl, "\",\""), strmangle.Placeholders(dialect.UseIndexPlaceholders, len(wl), 1, 1))
		} else {
			cache.query = "INSERT INTO \"alarm\" %sDEFAULT VALUES%s"
		}

		var queryOutput, queryReturning string

		if len(cache.retMapping) != 0 {
			queryReturning = fmt.Sprintf(" RETURNING \"%s\"", strings.Join(returnColumns, "\",\""))
		}

		cache.query = fmt.Sprintf(cache.query, queryOutput, queryReturning)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}

	if len(cache.retMapping) != 0 {
		err = exec.QueryRowContext(ctx, cache.query, vals...).Scan(queries.PtrsFromMapping(value, cache.retMapping)...)
	} else {
		_, err = exec.ExecContext(ctx, cache.query, vals...)
	}

	if err != nil {
		return errors.Wrap(err, "models: unable to insert into alarm")
	}

	if !cached {
		alarmInsertCacheMut.Lock()
		alarmInsertCache[key] = cache
		alarmInsertCacheMut.Unlock()
	}

	return o.doAfterInsertHooks(ctx, exec)
}

// Update uses an executor to update the Alarm.
// See boil.Columns.UpdateColumnSet documentation to understand column list inference for updates.
// Update does not automatically update the record in case of default values. Use .Reload() to refresh the records.
func (o *Alarm) Update(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) (int64, error) {
	var err error
	if err = o.doBeforeUpdateHooks(ctx, exec); err != nil {
		return 0, err
	}
	key := makeCacheKey(columns, nil)
	alarmUpdateCacheMut.RLock()
	cache, cached := alarmUpdateCache[key]
	alarmUpdateCacheMut.RUnlock()

	if !cached {
		wl := columns.UpdateColumnSet(
			alarmAllColumns,
			alarmPrimaryKeyColumns,
		)

		if !columns.IsWhitelist() {
			wl = strmangle.SetComplement(wl, []string{"created_at"})
		}
		if len(wl) == 0 {
			return 0, errors.New("models: unable to update alarm, could not build whitelist")
		}

		cache.query = fmt.Sprintf("UPDATE \"alarm\" SET %s WHERE %s",
			strmangle.SetParamNames("\"", "\"", 1, wl),
			strmangle.WhereClause("\"", "\"", len(wl)+1, alarmPrimaryKeyColumns),
		)
		cache.valueMapping, err = queries.BindMapping(alarmType, alarmMapping, append(wl, alarmPrimaryKeyColumns...))
		if err != nil {
			return 0, err
		}
	}

	values := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, values)
	}
	var result sql.Result
	result, err = exec.ExecContext(ctx, cache.query, values...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update alarm row")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by update for alarm")
	}

	if !cached {
		alarmUpdateCacheMut.Lock()
		alarmUpdateCache[key] = cache
		alarmUpdateCacheMut.Unlock()
	}

	return rowsAff, o.doAfterUpdateHooks(ctx, exec)
}

// UpdateAll updates all rows with the specified column values.
func (q alarmQuery) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	queries.SetUpdate(q.Query, cols)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update all for alarm")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to retrieve rows affected for alarm")
	}

	return rowsAff, nil
}

// UpdateAll updates all rows with the specified column values, using an executor.
func (o AlarmSlice) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	ln := int64(len(o))
	if ln == 0 {
		return 0, nil
	}

	if len(cols) == 0 {
		return 0, errors.New("models: update all requires at least one column argument")
	}

	colNames := make([]string, len(cols))
	args := make([]interface{}, len(cols))

	i := 0
	for name, value := range cols {
		colNames[i] = name
		args[i] = value
		i++
	}

	// Append all of the primary key values for each column
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), alarmPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := fmt.Sprintf("UPDATE \"alarm\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, colNames),
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), len(colNames)+1, alarmPrimaryKeyColumns, len(o)))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update all in alarm slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to retrieve rows affected all in update all alarm")
	}
	return rowsAff, nil
}

// Upsert attempts an insert using an executor, and does an update or ignore on conflict.
// See boil.Columns documentation for how to properly use updateColumns and insertColumns.
func (o *Alarm) Upsert(ctx context.Context, exec boil.ContextExecutor, updateOnConflict bool, conflictColumns []string, updateColumns, insertColumns boil.Columns) error {
	if o == nil {
		return errors.New("models: no alarm provided for upsert")
	}

	if err := o.doBeforeUpsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(alarmColumnsWithDefault, o)

	// Build cache key in-line uglily - mysql vs psql problems
	buf := strmangle.GetBuffer()
	if updateOnConflict {
		buf.WriteByte('t')
	} else {
		buf.WriteByte('f')
	}
	buf.WriteByte('.')
	for _, c := range conflictColumns {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(updateColumns.Kind))
	for _, c := range updateColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(insertColumns.Kind))
	for _, c := range insertColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzDefaults {
		buf.WriteString(c)
	}
	key := buf.String()
	strmangle.PutBuffer(buf)

	alarmUpsertCacheMut.RLock()
	cache, cached := alarmUpsertCache[key]
	alarmUpsertCacheMut.RUnlock()

	var err error

	if !cached {
		insert, ret := insertColumns.InsertColumnSet(
			alarmAllColumns,
			alarmColumnsWithDefault,
			alarmColumnsWithoutDefault,
			nzDefaults,
		)

		update := updateColumns.UpdateColumnSet(
			alarmAllColumns,
			alarmPrimaryKeyColumns,
		)

		if updateOnConflict && len(update) == 0 {
			return errors.New("models: unable to upsert alarm, could not build update column list")
		}

		conflict := conflictColumns
		if len(conflict) == 0 {
			conflict = make([]string, len(alarmPrimaryKeyColumns))
			copy(conflict, alarmPrimaryKeyColumns)
		}
		cache.query = buildUpsertQueryPostgres(dialect, "\"alarm\"", updateOnConflict, ret, update, conflict, insert)

		cache.valueMapping, err = queries.BindMapping(alarmType, alarmMapping, insert)
		if err != nil {
			return err
		}
		if len(ret) != 0 {
			cache.retMapping, err = queries.BindMapping(alarmType, alarmMapping, ret)
			if err != nil {
				return err
			}
		}
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)
	var returns []interface{}
	if len(cache.retMapping) != 0 {
		returns = queries.PtrsFromMapping(value, cache.retMapping)
	}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}
	if len(cache.retMapping) != 0 {
		err = exec.QueryRowContext(ctx, cache.query, vals...).Scan(returns...)
		if errors.Is(err, sql.ErrNoRows) {
			err = nil // Postgres doesn't return anything when there's no update
		}
	} else {
		_, err = exec.ExecContext(ctx, cache.query, vals...)
	}
	if err != nil {
		return errors.Wrap(err, "models: unable to upsert alarm")
	}

	if !cached {
		alarmUpsertCacheMut.Lock()
		alarmUpsertCache[key] = cache
		alarmUpsertCacheMut.Unlock()
	}

	return o.doAfterUpsertHooks(ctx, exec)
}

// Delete deletes a single Alarm record with an executor.
// Delete will match against the primary key column to find the record to delete.
func (o *Alarm) Delete(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if o == nil {
		return 0, errors.New("models: no Alarm provided for delete")
	}

	if err := o.doBeforeDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	args := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), alarmPrimaryKeyMapping)
	sql := "DELETE FROM \"alarm\" WHERE \"alarm_id\"=$1"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete from alarm")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by delete for alarm")
	}

	if err := o.doAfterDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	return rowsAff, nil
}

// DeleteAll deletes all matching rows.
func (q alarmQuery) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if q.Query == nil {
		return 0, errors.New("models: no alarmQuery provided for delete all")
	}

	queries.SetDelete(q.Query)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete all from alarm")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by deleteall for alarm")
	}

	return rowsAff, nil
}

// DeleteAll deletes all rows in the slice, using an executor.
func (o AlarmSlice) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if len(o) == 0 {
		return 0, nil
	}

	if len(alarmBeforeDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doBeforeDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	var args []interface{}
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), alarmPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "DELETE FROM \"alarm\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, alarmPrimaryKeyColumns, len(o))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete all from alarm slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by deleteall for alarm")
	}

	if len(alarmAfterDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	return rowsAff, nil
}

// Reload refetches the object from the database
// using the primary keys with an executor.
func (o *Alarm) Reload(ctx context.Context, exec boil.ContextExecutor) error {
	ret, err := FindAlarm(ctx, exec, o.AlarmID)
	if err != nil {
		return err
	}

	*o = *ret
	return nil
}

// ReloadAll refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *AlarmSlice) ReloadAll(ctx context.Context, exec boil.ContextExecutor) error {
	if o == nil || len(*o) == 0 {
		return nil
	}

	slice := AlarmSlice{}
	var args []interface{}
	for _, obj := range *o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), alarmPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "SELECT \"alarm\".* FROM \"alarm\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, alarmPrimaryKeyColumns, len(*o))

	q := queries.Raw(sql, args...)

	err := q.Bind(ctx, exec, &slice)
	if err != nil {
		return errors.Wrap(err, "models: unable to reload all in AlarmSlice")
	}

	*o = slice

	return nil
}

// AlarmExists checks if the Alarm row exists.
func AlarmExists(ctx context.Context, exec boil.ContextExecutor, alarmID int) (bool, error) {
	var exists bool
	sql := "select exists(select 1 from \"alarm\" where \"alarm_id\"=$1 limit 1)"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, alarmID)
	}
	row := exec.QueryRowContext(ctx, sql, alarmID)

	err := row.Scan(&exists)
	if err != nil {
		return false, errors.Wrap(err, "models: unable to check if alarm exists")
	}

	return exists, nil
}
