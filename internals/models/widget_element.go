// Code generated by SQLBoiler 4.13.0 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package models

import (
	"context"
	"database/sql"
	"fmt"
	"reflect"
	"strconv"
	"strings"
	"sync"
	"time"

	"github.com/friendsofgo/errors"
	"github.com/volatiletech/null/v8"
	"github.com/volatiletech/sqlboiler/v4/boil"
	"github.com/volatiletech/sqlboiler/v4/queries"
	"github.com/volatiletech/sqlboiler/v4/queries/qm"
	"github.com/volatiletech/sqlboiler/v4/queries/qmhelper"
	"github.com/volatiletech/strmangle"
)

// WidgetElement is an object representing the database table.
type WidgetElement struct {
	ID       int        `boil:"id" json:"id" toml:"id" yaml:"id"`
	TypeID   int        `boil:"type_id" json:"type_id" toml:"type_id" yaml:"type_id"`
	Category string     `boil:"category" json:"category" toml:"category" yaml:"category"`
	Seq      null.Int16 `boil:"seq" json:"seq,omitempty" toml:"seq" yaml:"seq,omitempty"`
	Config   null.JSON  `boil:"config" json:"config,omitempty" toml:"config" yaml:"config,omitempty"`

	R *widgetElementR `boil:"-" json:"-" toml:"-" yaml:"-"`
	L widgetElementL  `boil:"-" json:"-" toml:"-" yaml:"-"`
}

var WidgetElementColumns = struct {
	ID       string
	TypeID   string
	Category string
	Seq      string
	Config   string
}{
	ID:       "id",
	TypeID:   "type_id",
	Category: "category",
	Seq:      "seq",
	Config:   "config",
}

var WidgetElementTableColumns = struct {
	ID       string
	TypeID   string
	Category string
	Seq      string
	Config   string
}{
	ID:       "widget_element.id",
	TypeID:   "widget_element.type_id",
	Category: "widget_element.category",
	Seq:      "widget_element.seq",
	Config:   "widget_element.config",
}

// Generated where

var WidgetElementWhere = struct {
	ID       whereHelperint
	TypeID   whereHelperint
	Category whereHelperstring
	Seq      whereHelpernull_Int16
	Config   whereHelpernull_JSON
}{
	ID:       whereHelperint{field: "\"widget_element\".\"id\""},
	TypeID:   whereHelperint{field: "\"widget_element\".\"type_id\""},
	Category: whereHelperstring{field: "\"widget_element\".\"category\""},
	Seq:      whereHelpernull_Int16{field: "\"widget_element\".\"seq\""},
	Config:   whereHelpernull_JSON{field: "\"widget_element\".\"config\""},
}

// WidgetElementRels is where relationship names are stored.
var WidgetElementRels = struct {
}{}

// widgetElementR is where relationships are stored.
type widgetElementR struct {
}

// NewStruct creates a new relationship struct
func (*widgetElementR) NewStruct() *widgetElementR {
	return &widgetElementR{}
}

// widgetElementL is where Load methods for each relationship are stored.
type widgetElementL struct{}

var (
	widgetElementAllColumns            = []string{"id", "type_id", "category", "seq", "config"}
	widgetElementColumnsWithoutDefault = []string{"type_id", "category"}
	widgetElementColumnsWithDefault    = []string{"id", "seq", "config"}
	widgetElementPrimaryKeyColumns     = []string{"id"}
	widgetElementGeneratedColumns      = []string{}
)

type (
	// WidgetElementSlice is an alias for a slice of pointers to WidgetElement.
	// This should almost always be used instead of []WidgetElement.
	WidgetElementSlice []*WidgetElement
	// WidgetElementHook is the signature for custom WidgetElement hook methods
	WidgetElementHook func(context.Context, boil.ContextExecutor, *WidgetElement) error

	widgetElementQuery struct {
		*queries.Query
	}
)

// Cache for insert, update and upsert
var (
	widgetElementType                 = reflect.TypeOf(&WidgetElement{})
	widgetElementMapping              = queries.MakeStructMapping(widgetElementType)
	widgetElementPrimaryKeyMapping, _ = queries.BindMapping(widgetElementType, widgetElementMapping, widgetElementPrimaryKeyColumns)
	widgetElementInsertCacheMut       sync.RWMutex
	widgetElementInsertCache          = make(map[string]insertCache)
	widgetElementUpdateCacheMut       sync.RWMutex
	widgetElementUpdateCache          = make(map[string]updateCache)
	widgetElementUpsertCacheMut       sync.RWMutex
	widgetElementUpsertCache          = make(map[string]insertCache)
)

var (
	// Force time package dependency for automated UpdatedAt/CreatedAt.
	_ = time.Second
	// Force qmhelper dependency for where clause generation (which doesn't
	// always happen)
	_ = qmhelper.Where
)

var widgetElementAfterSelectHooks []WidgetElementHook

var widgetElementBeforeInsertHooks []WidgetElementHook
var widgetElementAfterInsertHooks []WidgetElementHook

var widgetElementBeforeUpdateHooks []WidgetElementHook
var widgetElementAfterUpdateHooks []WidgetElementHook

var widgetElementBeforeDeleteHooks []WidgetElementHook
var widgetElementAfterDeleteHooks []WidgetElementHook

var widgetElementBeforeUpsertHooks []WidgetElementHook
var widgetElementAfterUpsertHooks []WidgetElementHook

// doAfterSelectHooks executes all "after Select" hooks.
func (o *WidgetElement) doAfterSelectHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range widgetElementAfterSelectHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeInsertHooks executes all "before insert" hooks.
func (o *WidgetElement) doBeforeInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range widgetElementBeforeInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterInsertHooks executes all "after Insert" hooks.
func (o *WidgetElement) doAfterInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range widgetElementAfterInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpdateHooks executes all "before Update" hooks.
func (o *WidgetElement) doBeforeUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range widgetElementBeforeUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpdateHooks executes all "after Update" hooks.
func (o *WidgetElement) doAfterUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range widgetElementAfterUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeDeleteHooks executes all "before Delete" hooks.
func (o *WidgetElement) doBeforeDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range widgetElementBeforeDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterDeleteHooks executes all "after Delete" hooks.
func (o *WidgetElement) doAfterDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range widgetElementAfterDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpsertHooks executes all "before Upsert" hooks.
func (o *WidgetElement) doBeforeUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range widgetElementBeforeUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpsertHooks executes all "after Upsert" hooks.
func (o *WidgetElement) doAfterUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range widgetElementAfterUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// AddWidgetElementHook registers your hook function for all future operations.
func AddWidgetElementHook(hookPoint boil.HookPoint, widgetElementHook WidgetElementHook) {
	switch hookPoint {
	case boil.AfterSelectHook:
		widgetElementAfterSelectHooks = append(widgetElementAfterSelectHooks, widgetElementHook)
	case boil.BeforeInsertHook:
		widgetElementBeforeInsertHooks = append(widgetElementBeforeInsertHooks, widgetElementHook)
	case boil.AfterInsertHook:
		widgetElementAfterInsertHooks = append(widgetElementAfterInsertHooks, widgetElementHook)
	case boil.BeforeUpdateHook:
		widgetElementBeforeUpdateHooks = append(widgetElementBeforeUpdateHooks, widgetElementHook)
	case boil.AfterUpdateHook:
		widgetElementAfterUpdateHooks = append(widgetElementAfterUpdateHooks, widgetElementHook)
	case boil.BeforeDeleteHook:
		widgetElementBeforeDeleteHooks = append(widgetElementBeforeDeleteHooks, widgetElementHook)
	case boil.AfterDeleteHook:
		widgetElementAfterDeleteHooks = append(widgetElementAfterDeleteHooks, widgetElementHook)
	case boil.BeforeUpsertHook:
		widgetElementBeforeUpsertHooks = append(widgetElementBeforeUpsertHooks, widgetElementHook)
	case boil.AfterUpsertHook:
		widgetElementAfterUpsertHooks = append(widgetElementAfterUpsertHooks, widgetElementHook)
	}
}

// One returns a single widgetElement record from the query.
func (q widgetElementQuery) One(ctx context.Context, exec boil.ContextExecutor) (*WidgetElement, error) {
	o := &WidgetElement{}

	queries.SetLimit(q.Query, 1)

	err := q.Bind(ctx, exec, o)
	if err != nil {
		if errors.Is(err, sql.ErrNoRows) {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: failed to execute a one query for widget_element")
	}

	if err := o.doAfterSelectHooks(ctx, exec); err != nil {
		return o, err
	}

	return o, nil
}

// All returns all WidgetElement records from the query.
func (q widgetElementQuery) All(ctx context.Context, exec boil.ContextExecutor) (WidgetElementSlice, error) {
	var o []*WidgetElement

	err := q.Bind(ctx, exec, &o)
	if err != nil {
		return nil, errors.Wrap(err, "models: failed to assign all query results to WidgetElement slice")
	}

	if len(widgetElementAfterSelectHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterSelectHooks(ctx, exec); err != nil {
				return o, err
			}
		}
	}

	return o, nil
}

// Count returns the count of all WidgetElement records in the query.
func (q widgetElementQuery) Count(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to count widget_element rows")
	}

	return count, nil
}

// Exists checks if the row exists in the table.
func (q widgetElementQuery) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)
	queries.SetLimit(q.Query, 1)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return false, errors.Wrap(err, "models: failed to check if widget_element exists")
	}

	return count > 0, nil
}

// WidgetElements retrieves all the records using an executor.
func WidgetElements(mods ...qm.QueryMod) widgetElementQuery {
	mods = append(mods, qm.From("\"widget_element\""))
	q := NewQuery(mods...)
	if len(queries.GetSelect(q)) == 0 {
		queries.SetSelect(q, []string{"\"widget_element\".*"})
	}

	return widgetElementQuery{q}
}

// FindWidgetElement retrieves a single record by ID with an executor.
// If selectCols is empty Find will return all columns.
func FindWidgetElement(ctx context.Context, exec boil.ContextExecutor, iD int, selectCols ...string) (*WidgetElement, error) {
	widgetElementObj := &WidgetElement{}

	sel := "*"
	if len(selectCols) > 0 {
		sel = strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, selectCols), ",")
	}
	query := fmt.Sprintf(
		"select %s from \"widget_element\" where \"id\"=$1", sel,
	)

	q := queries.Raw(query, iD)

	err := q.Bind(ctx, exec, widgetElementObj)
	if err != nil {
		if errors.Is(err, sql.ErrNoRows) {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: unable to select from widget_element")
	}

	if err = widgetElementObj.doAfterSelectHooks(ctx, exec); err != nil {
		return widgetElementObj, err
	}

	return widgetElementObj, nil
}

// Insert a single record using an executor.
// See boil.Columns.InsertColumnSet documentation to understand column list inference for inserts.
func (o *WidgetElement) Insert(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) error {
	if o == nil {
		return errors.New("models: no widget_element provided for insertion")
	}

	var err error

	if err := o.doBeforeInsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(widgetElementColumnsWithDefault, o)

	key := makeCacheKey(columns, nzDefaults)
	widgetElementInsertCacheMut.RLock()
	cache, cached := widgetElementInsertCache[key]
	widgetElementInsertCacheMut.RUnlock()

	if !cached {
		wl, returnColumns := columns.InsertColumnSet(
			widgetElementAllColumns,
			widgetElementColumnsWithDefault,
			widgetElementColumnsWithoutDefault,
			nzDefaults,
		)

		cache.valueMapping, err = queries.BindMapping(widgetElementType, widgetElementMapping, wl)
		if err != nil {
			return err
		}
		cache.retMapping, err = queries.BindMapping(widgetElementType, widgetElementMapping, returnColumns)
		if err != nil {
			return err
		}
		if len(wl) != 0 {
			cache.query = fmt.Sprintf("INSERT INTO \"widget_element\" (\"%s\") %%sVALUES (%s)%%s", strings.Join(wl, "\",\""), strmangle.Placeholders(dialect.UseIndexPlaceholders, len(wl), 1, 1))
		} else {
			cache.query = "INSERT INTO \"widget_element\" %sDEFAULT VALUES%s"
		}

		var queryOutput, queryReturning string

		if len(cache.retMapping) != 0 {
			queryReturning = fmt.Sprintf(" RETURNING \"%s\"", strings.Join(returnColumns, "\",\""))
		}

		cache.query = fmt.Sprintf(cache.query, queryOutput, queryReturning)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}

	if len(cache.retMapping) != 0 {
		err = exec.QueryRowContext(ctx, cache.query, vals...).Scan(queries.PtrsFromMapping(value, cache.retMapping)...)
	} else {
		_, err = exec.ExecContext(ctx, cache.query, vals...)
	}

	if err != nil {
		return errors.Wrap(err, "models: unable to insert into widget_element")
	}

	if !cached {
		widgetElementInsertCacheMut.Lock()
		widgetElementInsertCache[key] = cache
		widgetElementInsertCacheMut.Unlock()
	}

	return o.doAfterInsertHooks(ctx, exec)
}

// Update uses an executor to update the WidgetElement.
// See boil.Columns.UpdateColumnSet documentation to understand column list inference for updates.
// Update does not automatically update the record in case of default values. Use .Reload() to refresh the records.
func (o *WidgetElement) Update(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) (int64, error) {
	var err error
	if err = o.doBeforeUpdateHooks(ctx, exec); err != nil {
		return 0, err
	}
	key := makeCacheKey(columns, nil)
	widgetElementUpdateCacheMut.RLock()
	cache, cached := widgetElementUpdateCache[key]
	widgetElementUpdateCacheMut.RUnlock()

	if !cached {
		wl := columns.UpdateColumnSet(
			widgetElementAllColumns,
			widgetElementPrimaryKeyColumns,
		)

		if !columns.IsWhitelist() {
			wl = strmangle.SetComplement(wl, []string{"created_at"})
		}
		if len(wl) == 0 {
			return 0, errors.New("models: unable to update widget_element, could not build whitelist")
		}

		cache.query = fmt.Sprintf("UPDATE \"widget_element\" SET %s WHERE %s",
			strmangle.SetParamNames("\"", "\"", 1, wl),
			strmangle.WhereClause("\"", "\"", len(wl)+1, widgetElementPrimaryKeyColumns),
		)
		cache.valueMapping, err = queries.BindMapping(widgetElementType, widgetElementMapping, append(wl, widgetElementPrimaryKeyColumns...))
		if err != nil {
			return 0, err
		}
	}

	values := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, values)
	}
	var result sql.Result
	result, err = exec.ExecContext(ctx, cache.query, values...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update widget_element row")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by update for widget_element")
	}

	if !cached {
		widgetElementUpdateCacheMut.Lock()
		widgetElementUpdateCache[key] = cache
		widgetElementUpdateCacheMut.Unlock()
	}

	return rowsAff, o.doAfterUpdateHooks(ctx, exec)
}

// UpdateAll updates all rows with the specified column values.
func (q widgetElementQuery) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	queries.SetUpdate(q.Query, cols)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update all for widget_element")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to retrieve rows affected for widget_element")
	}

	return rowsAff, nil
}

// UpdateAll updates all rows with the specified column values, using an executor.
func (o WidgetElementSlice) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	ln := int64(len(o))
	if ln == 0 {
		return 0, nil
	}

	if len(cols) == 0 {
		return 0, errors.New("models: update all requires at least one column argument")
	}

	colNames := make([]string, len(cols))
	args := make([]interface{}, len(cols))

	i := 0
	for name, value := range cols {
		colNames[i] = name
		args[i] = value
		i++
	}

	// Append all of the primary key values for each column
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), widgetElementPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := fmt.Sprintf("UPDATE \"widget_element\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, colNames),
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), len(colNames)+1, widgetElementPrimaryKeyColumns, len(o)))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update all in widgetElement slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to retrieve rows affected all in update all widgetElement")
	}
	return rowsAff, nil
}

// Upsert attempts an insert using an executor, and does an update or ignore on conflict.
// See boil.Columns documentation for how to properly use updateColumns and insertColumns.
func (o *WidgetElement) Upsert(ctx context.Context, exec boil.ContextExecutor, updateOnConflict bool, conflictColumns []string, updateColumns, insertColumns boil.Columns) error {
	if o == nil {
		return errors.New("models: no widget_element provided for upsert")
	}

	if err := o.doBeforeUpsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(widgetElementColumnsWithDefault, o)

	// Build cache key in-line uglily - mysql vs psql problems
	buf := strmangle.GetBuffer()
	if updateOnConflict {
		buf.WriteByte('t')
	} else {
		buf.WriteByte('f')
	}
	buf.WriteByte('.')
	for _, c := range conflictColumns {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(updateColumns.Kind))
	for _, c := range updateColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(insertColumns.Kind))
	for _, c := range insertColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzDefaults {
		buf.WriteString(c)
	}
	key := buf.String()
	strmangle.PutBuffer(buf)

	widgetElementUpsertCacheMut.RLock()
	cache, cached := widgetElementUpsertCache[key]
	widgetElementUpsertCacheMut.RUnlock()

	var err error

	if !cached {
		insert, ret := insertColumns.InsertColumnSet(
			widgetElementAllColumns,
			widgetElementColumnsWithDefault,
			widgetElementColumnsWithoutDefault,
			nzDefaults,
		)

		update := updateColumns.UpdateColumnSet(
			widgetElementAllColumns,
			widgetElementPrimaryKeyColumns,
		)

		if updateOnConflict && len(update) == 0 {
			return errors.New("models: unable to upsert widget_element, could not build update column list")
		}

		conflict := conflictColumns
		if len(conflict) == 0 {
			conflict = make([]string, len(widgetElementPrimaryKeyColumns))
			copy(conflict, widgetElementPrimaryKeyColumns)
		}
		cache.query = buildUpsertQueryPostgres(dialect, "\"widget_element\"", updateOnConflict, ret, update, conflict, insert)

		cache.valueMapping, err = queries.BindMapping(widgetElementType, widgetElementMapping, insert)
		if err != nil {
			return err
		}
		if len(ret) != 0 {
			cache.retMapping, err = queries.BindMapping(widgetElementType, widgetElementMapping, ret)
			if err != nil {
				return err
			}
		}
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)
	var returns []interface{}
	if len(cache.retMapping) != 0 {
		returns = queries.PtrsFromMapping(value, cache.retMapping)
	}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}
	if len(cache.retMapping) != 0 {
		err = exec.QueryRowContext(ctx, cache.query, vals...).Scan(returns...)
		if errors.Is(err, sql.ErrNoRows) {
			err = nil // Postgres doesn't return anything when there's no update
		}
	} else {
		_, err = exec.ExecContext(ctx, cache.query, vals...)
	}
	if err != nil {
		return errors.Wrap(err, "models: unable to upsert widget_element")
	}

	if !cached {
		widgetElementUpsertCacheMut.Lock()
		widgetElementUpsertCache[key] = cache
		widgetElementUpsertCacheMut.Unlock()
	}

	return o.doAfterUpsertHooks(ctx, exec)
}

// Delete deletes a single WidgetElement record with an executor.
// Delete will match against the primary key column to find the record to delete.
func (o *WidgetElement) Delete(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if o == nil {
		return 0, errors.New("models: no WidgetElement provided for delete")
	}

	if err := o.doBeforeDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	args := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), widgetElementPrimaryKeyMapping)
	sql := "DELETE FROM \"widget_element\" WHERE \"id\"=$1"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete from widget_element")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by delete for widget_element")
	}

	if err := o.doAfterDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	return rowsAff, nil
}

// DeleteAll deletes all matching rows.
func (q widgetElementQuery) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if q.Query == nil {
		return 0, errors.New("models: no widgetElementQuery provided for delete all")
	}

	queries.SetDelete(q.Query)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete all from widget_element")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by deleteall for widget_element")
	}

	return rowsAff, nil
}

// DeleteAll deletes all rows in the slice, using an executor.
func (o WidgetElementSlice) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if len(o) == 0 {
		return 0, nil
	}

	if len(widgetElementBeforeDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doBeforeDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	var args []interface{}
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), widgetElementPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "DELETE FROM \"widget_element\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, widgetElementPrimaryKeyColumns, len(o))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete all from widgetElement slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by deleteall for widget_element")
	}

	if len(widgetElementAfterDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	return rowsAff, nil
}

// Reload refetches the object from the database
// using the primary keys with an executor.
func (o *WidgetElement) Reload(ctx context.Context, exec boil.ContextExecutor) error {
	ret, err := FindWidgetElement(ctx, exec, o.ID)
	if err != nil {
		return err
	}

	*o = *ret
	return nil
}

// ReloadAll refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *WidgetElementSlice) ReloadAll(ctx context.Context, exec boil.ContextExecutor) error {
	if o == nil || len(*o) == 0 {
		return nil
	}

	slice := WidgetElementSlice{}
	var args []interface{}
	for _, obj := range *o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), widgetElementPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "SELECT \"widget_element\".* FROM \"widget_element\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, widgetElementPrimaryKeyColumns, len(*o))

	q := queries.Raw(sql, args...)

	err := q.Bind(ctx, exec, &slice)
	if err != nil {
		return errors.Wrap(err, "models: unable to reload all in WidgetElementSlice")
	}

	*o = slice

	return nil
}

// WidgetElementExists checks if the WidgetElement row exists.
func WidgetElementExists(ctx context.Context, exec boil.ContextExecutor, iD int) (bool, error) {
	var exists bool
	sql := "select exists(select 1 from \"widget_element\" where \"id\"=$1 limit 1)"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, iD)
	}
	row := exec.QueryRowContext(ctx, sql, iD)

	err := row.Scan(&exists)
	if err != nil {
		return false, errors.Wrap(err, "models: unable to check if widget_element exists")
	}

	return exists, nil
}
